<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Algorithm Hub&#10;&#10;Aplicación full-stack para aprender algoritmos. Frontend en Angular, backend en NestJS con TypeORM y MariaDB. Los usuarios pueden registrarse, explorar un catálogo de 20 algoritmos predefinidos, marcarlos como aprendidos y ver su progreso global.&#10;&#10;Contenido clave&#10;- Stack: Angular 17+, NestJS 10+, TypeScript, TypeORM, MariaDB 10.6+, JWT, ESLint, Prettier.&#10;- Arquitectura: monorepo simple con carpetas frontend/ y backend/ y docs/.&#10;- Calidad: Clean Code, SOLID, pruebas unitarias y e2e, CI/CD sugerido con GitHub Actions.&#10;&#10;Estructura del repositorio&#10;- frontend/ Aplicación Angular&#10;- backend/ API NestJS (TypeORM + MariaDB)&#10;- docs/ Documentación técnica y funcional&#10;- README.md Este archivo&#10;&#10;Requisitos&#10;- Node.js LTS (&gt;= 20)&#10;- npm o pnpm (recomendado pnpm &gt;= 9)&#10;- MariaDB 10.6+ o Docker Desktop&#10;- Angular CLI y Nest CLI (opcional para desarrollo):&#10;  - npm i -g @angular/cli @nestjs/cli&#10;&#10;Configuración rápida (local)&#10;1) Base de datos&#10;- Opción Docker: ver docs/deploy.md para docker-compose con MariaDB&#10;- Opción local:&#10;  - Crear base de datos algorithm_hub y usuario con permisos&#10;2) Variables de entorno&#10;- Backend: crear backend/.env con&#10;  - DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME&#10;  - JWT_SECRET, JWT_EXPIRES_IN&#10;- Frontend: ajustar environments en Angular para API_URL&#10;3) Instalación&#10;- cd frontend &amp;&amp; npm i&#10;- cd backend &amp;&amp; npm i&#10;4) Migraciones y seed&#10;- Ejecutar migraciones TypeORM&#10;- Ejecutar seed inicial de 20 algoritmos&#10;5) Ejecutar&#10;- Backend: npm run start:dev&#10;- Frontend: npm start&#10;&#10;Características&#10;- Registro e inicio de sesión con JWT&#10;- Listado y detalle de 20 algoritmos predefinidos&#10;- Marcar/desmarcar algoritmo como aprendido&#10;- Cálculo de progreso global (aprendidos/total)&#10;&#10;Documentación&#10;- docs/architecture.md Arquitectura general y módulos&#10;- docs/api.md Contrato de API REST&#10;- docs/db.md Esquema de datos y entidades&#10;- docs/algorithms.md Lista de 20 algoritmos&#10;- docs/setup-local.md Guía detallada de instalación en macOS&#10;- docs/deploy.md Despliegue con Docker Compose&#10;- docs/coding-standards.md Estándares de código (Clean Code)&#10;- docs/contributing.md Flujo de contribución y calidad&#10;- docs/security.md Consideraciones de seguridad&#10;&#10;Buenas prácticas&#10;- Lint y formateo: ESLint + Prettier&#10;- Commits: Conventional Commits&#10;- Revisión de código obligatoria en PRs&#10;&#10;Licencia&#10;- MIT (sugerida)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.env" />
              <option name="updatedContent" value="# Entorno por defecto para desarrollo local&#10;NODE_ENV=development&#10;PORT=3000&#10;&#10;# JWT&#10;JWT_SECRET=supersecret_dev_token_please_change&#10;JWT_EXPIRES_IN=1h&#10;&#10;# Base de datos local (si no usas Docker)&#10;DB_HOST=localhost&#10;DB_PORT=3306&#10;DB_USER=algouser&#10;DB_PASSWORD=algopass&#10;DB_NAME=algorithm_hub&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;jest&quot;,&#10;    &quot;test:watch&quot;: &quot;jest --watch&quot;,&#10;    &quot;test:cov&quot;: &quot;jest --coverage&quot;,&#10;    &quot;test:debug&quot;: &quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;,&#10;    &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@nestjs/jwt&quot;: &quot;^10.2.0&quot;,&#10;    &quot;@nestjs/passport&quot;: &quot;^10.0.3&quot;,&#10;    &quot;@nestjs/typeorm&quot;: &quot;^10.0.2&quot;,&#10;    &quot;argon2&quot;: &quot;^0.40.1&quot;,&#10;    &quot;class-transformer&quot;: &quot;^0.5.1&quot;,&#10;    &quot;class-validator&quot;: &quot;^0.14.1&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-jwt&quot;: &quot;^4.0.1&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.0&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.1&quot;,&#10;    &quot;typeorm&quot;: &quot;^0.3.20&quot;,&#10;    &quot;mysql2&quot;: &quot;^3.11.3&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@nestjs/cli&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@types/express&quot;: &quot;^5.0.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^29.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^20.3.1&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.0.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^9.0.0&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.0.0&quot;,&#10;    &quot;jest&quot;: &quot;^29.5.0&quot;,&#10;    &quot;prettier&quot;: &quot;^3.0.0&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^7.0.0&quot;,&#10;    &quot;ts-jest&quot;: &quot;^29.1.0&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.4.3&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.1&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.1.3&quot;&#10;  },&#10;  &quot;jest&quot;: {&#10;    &quot;moduleFileExtensions&quot;: [&#10;      &quot;js&quot;,&#10;      &quot;json&quot;,&#10;      &quot;ts&quot;&#10;    ],&#10;    &quot;rootDir&quot;: &quot;src&quot;,&#10;    &quot;testRegex&quot;: &quot;.*\\.spec\\.ts$&quot;,&#10;    &quot;transform&quot;: {&#10;      &quot;^.+\\.(t|j)s$&quot;: &quot;ts-jest&quot;&#10;    },&#10;    &quot;collectCoverageFrom&quot;: [&#10;      &quot;**/*.(t|j)s&quot;&#10;    ],&#10;    &quot;coverageDirectory&quot;: &quot;../coverage&quot;,&#10;    &quot;testEnvironment&quot;: &quot;node&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;jest&quot;,&#10;    &quot;test:watch&quot;: &quot;jest --watch&quot;,&#10;    &quot;test:cov&quot;: &quot;jest --coverage&quot;,&#10;    &quot;test:debug&quot;: &quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;,&#10;    &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@nestjs/jwt&quot;: &quot;^10.2.0&quot;,&#10;    &quot;@nestjs/passport&quot;: &quot;^10.0.3&quot;,&#10;    &quot;@nestjs/typeorm&quot;: &quot;^10.0.2&quot;,&#10;    &quot;argon2&quot;: &quot;^0.40.1&quot;,&#10;    &quot;class-transformer&quot;: &quot;^0.5.1&quot;,&#10;    &quot;class-validator&quot;: &quot;^0.14.1&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-jwt&quot;: &quot;^4.0.1&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.0&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.1&quot;,&#10;    &quot;typeorm&quot;: &quot;^0.3.20&quot;,&#10;    &quot;mysql2&quot;: &quot;^3.11.3&quot;,&#10;    &quot;joi&quot;: &quot;^17.13.3&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@nestjs/cli&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@types/express&quot;: &quot;^5.0.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^29.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^20.3.1&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.0.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^9.0.0&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.0.0&quot;,&#10;    &quot;jest&quot;: &quot;^29.5.0&quot;,&#10;    &quot;prettier&quot;: &quot;^3.0.0&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^7.0.0&quot;,&#10;    &quot;ts-jest&quot;: &quot;^29.1.0&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.4.3&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.1&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.1.3&quot;&#10;  },&#10;  &quot;jest&quot;: {&#10;    &quot;moduleFileExtensions&quot;: [&#10;      &quot;js&quot;,&#10;      &quot;json&quot;,&#10;      &quot;ts&quot;&#10;    ],&#10;    &quot;rootDir&quot;: &quot;src&quot;,&#10;    &quot;testRegex&quot;: &quot;.*\\.spec\\.ts$&quot;,&#10;    &quot;transform&quot;: {&#10;      &quot;^.+\\.(t|j)s$&quot;: &quot;ts-jest&quot;&#10;    },&#10;    &quot;collectCoverageFrom&quot;: [&#10;      &quot;**/*.(t|j)s&quot;&#10;    ],&#10;    &quot;coverageDirectory&quot;: &quot;../coverage&quot;,&#10;    &quot;testEnvironment&quot;: &quot;node&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/common/decorators/current-user.decorator.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/common/decorators/current-user.decorator.ts" />
              <option name="updatedContent" value="import { createParamDecorator, ExecutionContext } from '@nestjs/common';&#10;&#10;export interface JwtUser {&#10;  sub: number;&#10;  email: string;&#10;  name: string;&#10;  iat?: number;&#10;  exp?: number;&#10;}&#10;&#10;export const CurrentUser = createParamDecorator&lt;keyof JwtUser | undefined&gt;(&#10;  (data: keyof JwtUser | undefined, ctx: ExecutionContext) =&gt; {&#10;    const request = ctx.switchToHttp().getRequest();&#10;    const user: JwtUser | undefined = request.user;&#10;    if (!user) return undefined;&#10;    return data ? user[data] : user;&#10;  },&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/common/guards/jwt-auth.guard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/common/guards/jwt-auth.guard.ts" />
              <option name="updatedContent" value="import { Injectable } from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;&#10;@Injectable()&#10;export class JwtAuthGuard extends AuthGuard('jwt') {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/database/entities/algorithm.entity.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/database/entities/algorithm.entity.ts" />
              <option name="originalContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn, Index } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;export type AlgorithmCategory = 'sorting' | 'search' | 'graph' | 'dp' | 'string' | 'greedy' | 'tree';&#10;export type AlgorithmDifficulty = 'easy' | 'medium' | 'hard';&#10;&#10;@Entity('algorithms')&#10;export class Algorithm {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Index({ unique: true })&#10;  @Column({ type: 'varchar', length: 100, unique: true })&#10;  slug: string;&#10;&#10;  @Column({ type: 'varchar', length: 150 })&#10;  name: string;&#10;&#10;  @Index()&#10;  @Column({ type: 'varchar', length: 20 })&#10;  category: AlgorithmCategory;&#10;&#10;  @Column({ type: 'varchar', length: 10 })&#10;  difficulty: AlgorithmDifficulty;&#10;&#10;  @Column({ type: 'text', nullable: true })&#10;  description?: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.algorithm)&#10;  learnedBy: UserAlgorithm[];&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn, Index } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;export type AlgorithmCategory = 'sorting' | 'search' | 'graph' | 'dp' | 'string' | 'greedy' | 'tree';&#10;export type AlgorithmDifficulty = 'easy' | 'medium' | 'hard';&#10;&#10;@Entity('algorithms')&#10;export class Algorithm {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Column({ type: 'varchar', length: 100, unique: true })&#10;  slug: string;&#10;&#10;  @Column({ type: 'varchar', length: 150 })&#10;  name: string;&#10;&#10;  @Index()&#10;  @Column({ type: 'varchar', length: 20 })&#10;  category: AlgorithmCategory;&#10;&#10;  @Column({ type: 'varchar', length: 10 })&#10;  difficulty: AlgorithmDifficulty;&#10;&#10;  @Column({ type: 'text', nullable: true })&#10;  description?: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.algorithm)&#10;  learnedBy: UserAlgorithm[];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/database/entities/user-algorithm.entity.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/database/entities/user-algorithm.entity.ts" />
              <option name="updatedContent" value="import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, Unique, JoinColumn, Index } from 'typeorm';&#10;import { User } from './user.entity';&#10;import { Algorithm } from './algorithm.entity';&#10;&#10;@Entity('user_algorithms')&#10;@Unique(['user', 'algorithm'])&#10;export class UserAlgorithm {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @ManyToOne(() =&gt; User, (user) =&gt; user.learnedRelations, { onDelete: 'CASCADE' })&#10;  @JoinColumn({ name: 'user_id' })&#10;  @Index()&#10;  user: User;&#10;&#10;  @ManyToOne(() =&gt; Algorithm, (algorithm) =&gt; algorithm.learnedBy, { onDelete: 'CASCADE' })&#10;  @JoinColumn({ name: 'algorithm_id' })&#10;  @Index()&#10;  algorithm: Algorithm;&#10;&#10;  @CreateDateColumn({ name: 'learned_at' })&#10;  learnedAt: Date;&#10;&#10;  @Column({ name: 'active', type: 'boolean', default: true })&#10;  active: boolean;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/database/entities/user.entity.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/database/entities/user.entity.ts" />
              <option name="originalContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn, Index } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;@Entity('users')&#10;export class User {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Index({ unique: true })&#10;  @Column({ type: 'varchar', length: 191, unique: true })&#10;  email: string;&#10;&#10;  @Column({ type: 'varchar', length: 100 })&#10;  name: string;&#10;&#10;  @Column({ name: 'password_hash', type: 'varchar', length: 191 })&#10;  passwordHash: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.user)&#10;  learnedRelations: UserAlgorithm[];&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;@Entity('users')&#10;export class User {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Column({ type: 'varchar', length: 191, unique: true })&#10;  email: string;&#10;&#10;  @Column({ type: 'varchar', length: 100 })&#10;  name: string;&#10;&#10;  @Column({ name: 'password_hash', type: 'varchar', length: 191 })&#10;  passwordHash: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.user)&#10;  learnedRelations: UserAlgorithm[];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/database/seeds/algorithms.seed.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/database/seeds/algorithms.seed.ts" />
              <option name="updatedContent" value="import { AlgorithmCategory, AlgorithmDifficulty } from '../entities/algorithm.entity';&#10;&#10;export interface SeedAlgorithm {&#10;  slug: string;&#10;  name: string;&#10;  category: AlgorithmCategory;&#10;  difficulty: AlgorithmDifficulty;&#10;  description?: string;&#10;}&#10;&#10;export const SEED_ALGORITHMS: SeedAlgorithm[] = [&#10;  { slug: 'bubble-sort', name: 'Bubble Sort', category: 'sorting', difficulty: 'easy', description: 'Ordenamiento simple por intercambio de pares adyacentes.' },&#10;  { slug: 'insertion-sort', name: 'Insertion Sort', category: 'sorting', difficulty: 'easy', description: 'Inserta elementos en su posición correcta construyendo una lista ordenada.' },&#10;  { slug: 'selection-sort', name: 'Selection Sort', category: 'sorting', difficulty: 'easy', description: 'Selecciona el mínimo sucesivo y lo coloca al inicio.' },&#10;  { slug: 'merge-sort', name: 'Merge Sort', category: 'sorting', difficulty: 'medium', description: 'Divide y vencerás, combina listas ordenadas eficientemente.' },&#10;  { slug: 'quick-sort', name: 'Quick Sort', category: 'sorting', difficulty: 'medium', description: 'Particiona en torno a un pivote y ordena recursivamente.' },&#10;  { slug: 'binary-search', name: 'Binary Search', category: 'search', difficulty: 'easy', description: 'Búsqueda logarítmica en arreglos ordenados.' },&#10;  { slug: 'breadth-first-search', name: 'Breadth-First Search (BFS)', category: 'graph', difficulty: 'easy', description: 'Recorre grafos por niveles desde un nodo fuente.' },&#10;  { slug: 'depth-first-search', name: 'Depth-First Search (DFS)', category: 'graph', difficulty: 'easy', description: 'Recorre grafos explorando en profundidad.' },&#10;  { slug: 'dijkstra', name: 'Dijkstra', category: 'graph', difficulty: 'medium', description: 'Caminos mínimos en grafos con pesos no negativos.' },&#10;  { slug: 'bellman-ford', name: 'Bellman-Ford', category: 'graph', difficulty: 'medium', description: 'Caminos mínimos con detección de ciclos negativos.' },&#10;  { slug: 'floyd-warshall', name: 'Floyd-Warshall', category: 'graph', difficulty: 'medium', description: 'Todos los pares de caminos mínimos en grafos ponderados.' },&#10;  { slug: 'kruskal', name: 'Kruskal', category: 'graph', difficulty: 'medium', description: 'Árbol de expansión mínima usando conjuntos disjuntos.' },&#10;  { slug: 'prim', name: 'Prim', category: 'graph', difficulty: 'medium', description: 'Árbol de expansión mínima con crecimiento incremental.' },&#10;  { slug: 'kmp', name: 'Knuth–Morris–Pratt (KMP)', category: 'string', difficulty: 'medium', description: 'Búsqueda de patrones con prefijos/sufijos eficientes.' },&#10;  { slug: 'rabin-karp', name: 'Rabin-Karp', category: 'string', difficulty: 'medium', description: 'Búsqueda de cadenas usando hashing rodante.' },&#10;  { slug: 'knapsack-01', name: '0/1 Knapsack', category: 'dp', difficulty: 'medium', description: 'Selección óptima de ítems con restricción de capacidad.' },&#10;  { slug: 'lis', name: 'Longest Increasing Subsequence (LIS)', category: 'dp', difficulty: 'medium', description: 'Subsecuencia estrictamente creciente más larga.' },&#10;  { slug: 'topological-sort', name: 'Topological Sort', category: 'graph', difficulty: 'easy', description: 'Orden lineal de DAG basado en dependencias.' },&#10;  { slug: 'activity-selection', name: 'Activity Selection', category: 'greedy', difficulty: 'easy', description: 'Selección de actividades compatibles maximizando cantidad.' },&#10;  { slug: 'binary-tree-traversals', name: 'Recorridos de Árbol Binario (In/Pre/Post)', category: 'tree', difficulty: 'easy', description: 'Recorridos fundamentales en árboles binarios.' },&#10;];&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main.ts" />
              <option name="originalContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule, { cors: true });&#10;  // Prefijo global de la API según docs&#10;  app.setGlobalPrefix('api/v1');&#10;  // CORS ya habilitado arriba; se puede ajustar origen en producción&#10;  await app.listen(process.env.PORT ? Number(process.env.PORT) : 3000, '0.0.0.0');&#10;}&#10;bootstrap();&#10;" />
              <option name="updatedContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { ValidationPipe } from '@nestjs/common';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule, { cors: true });&#10;  // Prefijo global de la API según docs&#10;  app.setGlobalPrefix('api/v1');&#10;  app.useGlobalPipes(&#10;    new ValidationPipe({&#10;      whitelist: true,&#10;      forbidNonWhitelisted: true,&#10;      transform: true,&#10;      transformOptions: { enableImplicitConversion: true },&#10;    }),&#10;  );&#10;  // CORS ya habilitado arriba; se puede ajustar origen en producción&#10;  await app.listen(process.env.PORT ? Number(process.env.PORT) : 3000, '0.0.0.0');&#10;}&#10;bootstrap();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.controller.ts" />
              <option name="originalContent" value="import { Controller, Get, Param, ParseIntPipe, Query } from '@nestjs/common';&#10;import { AlgorithmsService } from './algorithms.service';&#10;import { IsIn, IsInt, IsOptional, IsString, Max, Min } from 'class-validator';&#10;import { AlgorithmCategory } from '../../database/entities/algorithm.entity';&#10;&#10;class ListQueryDto {&#10;  @IsOptional()&#10;  @IsString()&#10;  search?: string;&#10;&#10;  @IsOptional()&#10;  @IsIn(['sorting', 'search', 'graph', 'dp', 'string', 'greedy', 'tree'])&#10;  category?: AlgorithmCategory;&#10;&#10;  @IsOptional()&#10;  @IsInt()&#10;  @Min(1)&#10;  page?: number;&#10;&#10;  @IsOptional()&#10;  @IsInt()&#10;  @Min(1)&#10;  @Max(50)&#10;  pageSize?: number;&#10;}&#10;&#10;@Controller('algorithms')&#10;export class AlgorithmsController {&#10;  constructor(private readonly service: AlgorithmsService) {}&#10;&#10;  @Get()&#10;  async list(@Query() query: ListQueryDto) {&#10;    return this.service.findAll(query);&#10;  }&#10;&#10;  @Get(':slug')&#10;  async getOne(@Param('slug') slug: string) {&#10;    return this.service.findBySlugOrFail(slug);&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Controller, Get, Param, Query } from '@nestjs/common';&#10;import { AlgorithmsService } from './algorithms.service';&#10;import { IsIn, IsInt, IsOptional, IsString, Max, Min } from 'class-validator';&#10;import { AlgorithmCategory } from '../../database/entities/algorithm.entity';&#10;&#10;class ListQueryDto {&#10;  @IsOptional()&#10;  @IsString()&#10;  search?: string;&#10;&#10;  @IsOptional()&#10;  @IsIn(['sorting', 'search', 'graph', 'dp', 'string', 'greedy', 'tree'])&#10;  category?: AlgorithmCategory;&#10;&#10;  @IsOptional()&#10;  @IsInt()&#10;  @Min(1)&#10;  page?: number;&#10;&#10;  @IsOptional()&#10;  @IsInt()&#10;  @Min(1)&#10;  @Max(50)&#10;  pageSize?: number;&#10;}&#10;&#10;@Controller('algorithms')&#10;export class AlgorithmsController {&#10;  constructor(private readonly service: AlgorithmsService) {}&#10;&#10;  @Get()&#10;  async list(@Query() query: ListQueryDto) {&#10;    return this.service.findAll(query);&#10;  }&#10;&#10;  @Get(':slug')&#10;  async getOne(@Param('slug') slug: string) {&#10;    return this.service.findBySlugOrFail(slug);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.module.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.module.ts" />
              <option name="updatedContent" value="import { Module, OnModuleInit } from '@nestjs/common';&#10;import { TypeOrmModule } from '@nestjs/typeorm';&#10;import { Algorithm } from '../../database/entities/algorithm.entity';&#10;import { AlgorithmsService } from './algorithms.service';&#10;import { AlgorithmsController } from './algorithms.controller';&#10;import { Repository } from 'typeorm';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { SEED_ALGORITHMS } from '../../database/seeds/algorithms.seed';&#10;&#10;class AlgorithmsSeeder implements OnModuleInit {&#10;  constructor(@InjectRepository(Algorithm) private readonly repo: Repository&lt;Algorithm&gt;) {}&#10;  async onModuleInit() {&#10;    const existing = await this.repo.find({ select: ['slug'] });&#10;    const existingSlugs = new Set(existing.map((a) =&gt; a.slug));&#10;    const toInsert = SEED_ALGORITHMS.filter((s) =&gt; !existingSlugs.has(s.slug));&#10;    if (toInsert.length) {&#10;      await this.repo.insert(toInsert);&#10;    }&#10;  }&#10;}&#10;&#10;@Module({&#10;  imports: [TypeOrmModule.forFeature([Algorithm])],&#10;  controllers: [AlgorithmsController],&#10;  providers: [AlgorithmsService, AlgorithmsSeeder],&#10;  exports: [AlgorithmsService],&#10;})&#10;export class AlgorithmsModule {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/algorithms/algorithms.service.ts" />
              <option name="originalContent" value="import { Injectable, NotFoundException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { FindOptionsWhere, ILike, Like, Repository } from 'typeorm';&#10;import { Algorithm, AlgorithmCategory } from '../../database/entities/algorithm.entity';&#10;&#10;export interface ListAlgorithmsParams {&#10;  search?: string;&#10;  category?: AlgorithmCategory;&#10;  page?: number;&#10;  pageSize?: number;&#10;}&#10;&#10;@Injectable()&#10;export class AlgorithmsService {&#10;  constructor(&#10;    @InjectRepository(Algorithm) private readonly repo: Repository&lt;Algorithm&gt;,&#10;  ) {}&#10;&#10;  async findAll(params: ListAlgorithmsParams) {&#10;    const page = Math.max(1, params.page || 1);&#10;    const pageSize = Math.min(50, Math.max(1, params.pageSize || 20));&#10;&#10;    const where: FindOptionsWhere&lt;Algorithm&gt;[] = [];&#10;    const filters: FindOptionsWhere&lt;Algorithm&gt; = {} as any;&#10;&#10;    if (params.category) {&#10;      filters.category = params.category;&#10;    }&#10;&#10;    if (params.search) {&#10;      const q = `%${params.search}%`;&#10;      // MariaDB/MySQL suelen ser case-insensitive por collation, usar Like es suficiente&#10;      where.push({ ...filters, name: Like(q) });&#10;      where.push({ ...filters, slug: Like(q) });&#10;      where.push({ ...filters, description: Like(q) });&#10;    } else {&#10;      where.push(filters);&#10;    }&#10;&#10;    const [items, total] = await this.repo.findAndCount({&#10;      where,&#10;      order: { name: 'ASC' },&#10;      skip: (page - 1) * pageSize,&#10;      take: pageSize,&#10;    });&#10;&#10;    return { items, page, pageSize, total };&#10;  }&#10;&#10;  async findBySlugOrFail(slug: string) {&#10;    const algo = await this.repo.findOne({ where: { slug } });&#10;    if (!algo) throw new NotFoundException('Algoritmo no encontrado');&#10;    return algo;&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Injectable, NotFoundException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { FindOptionsWhere, Like, Repository } from 'typeorm';&#10;import { Algorithm, AlgorithmCategory } from '../../database/entities/algorithm.entity';&#10;&#10;export interface ListAlgorithmsParams {&#10;  search?: string;&#10;  category?: AlgorithmCategory;&#10;  page?: number;&#10;  pageSize?: number;&#10;}&#10;&#10;@Injectable()&#10;export class AlgorithmsService {&#10;  constructor(&#10;    @InjectRepository(Algorithm) private readonly repo: Repository&lt;Algorithm&gt;,&#10;  ) {}&#10;&#10;  async findAll(params: ListAlgorithmsParams) {&#10;    const page = Math.max(1, params.page || 1);&#10;    const pageSize = Math.min(50, Math.max(1, params.pageSize || 20));&#10;&#10;    const where: FindOptionsWhere&lt;Algorithm&gt;[] = [];&#10;    const filters: FindOptionsWhere&lt;Algorithm&gt; = {} as any;&#10;&#10;    if (params.category) {&#10;      filters.category = params.category;&#10;    }&#10;&#10;    if (params.search) {&#10;      const q = `%${params.search}%`;&#10;      // MariaDB/MySQL suelen ser case-insensitive por collation, usar Like es suficiente&#10;      where.push({ ...filters, name: Like(q) });&#10;      where.push({ ...filters, slug: Like(q) });&#10;      where.push({ ...filters, description: Like(q) });&#10;    } else {&#10;      where.push(filters);&#10;    }&#10;&#10;    const [items, total] = await this.repo.findAndCount({&#10;      where,&#10;      order: { name: 'ASC' },&#10;      skip: (page - 1) * pageSize,&#10;      take: pageSize,&#10;    });&#10;&#10;    return { items, page, pageSize, total };&#10;  }&#10;&#10;  async findBySlugOrFail(slug: string) {&#10;    const algo = await this.repo.findOne({ where: { slug } });&#10;    if (!algo) throw new NotFoundException('Algoritmo no encontrado');&#10;    return algo;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/auth/auth.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/auth/auth.controller.ts" />
              <option name="updatedContent" value="import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';&#10;import { AuthService } from './auth.service';&#10;import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';&#10;&#10;class RegisterDto {&#10;  @IsEmail()&#10;  email: string;&#10;&#10;  @IsString()&#10;  @MinLength(8)&#10;  password: string;&#10;&#10;  @IsString()&#10;  @IsNotEmpty()&#10;  name: string;&#10;}&#10;&#10;class LoginDto {&#10;  @IsEmail()&#10;  email: string;&#10;&#10;  @IsString()&#10;  @MinLength(8)&#10;  password: string;&#10;}&#10;&#10;@Controller('auth')&#10;export class AuthController {&#10;  constructor(private readonly auth: AuthService) {}&#10;&#10;  @Post('register')&#10;  async register(@Body() dto: RegisterDto) {&#10;    return this.auth.register(dto.email, dto.password, dto.name);&#10;  }&#10;&#10;  @Post('login')&#10;  @HttpCode(HttpStatus.OK)&#10;  async login(@Body() dto: LoginDto) {&#10;    return this.auth.login(dto.email, dto.password);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/auth/auth.module.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/auth/auth.module.ts" />
              <option name="updatedContent" value="import { Module } from '@nestjs/common';&#10;import { JwtModule } from '@nestjs/jwt';&#10;import { PassportModule } from '@nestjs/passport';&#10;import { TypeOrmModule } from '@nestjs/typeorm';&#10;import { ConfigModule, ConfigService } from '@nestjs/config';&#10;import { AuthService } from './auth.service';&#10;import { AuthController } from './auth.controller';&#10;import { User } from '../../database/entities/user.entity';&#10;import { JwtStrategy } from './jwt.strategy';&#10;&#10;@Module({&#10;  imports: [&#10;    ConfigModule,&#10;    PassportModule,&#10;    TypeOrmModule.forFeature([User]),&#10;    JwtModule.registerAsync({&#10;      inject: [ConfigService],&#10;      useFactory: (config: ConfigService) =&gt; ({&#10;        secret: config.get&lt;string&gt;('JWT_SECRET'),&#10;        signOptions: { expiresIn: config.get&lt;string&gt;('JWT_EXPIRES_IN') || '1h' },&#10;      }),&#10;    }),&#10;  ],&#10;  controllers: [AuthController],&#10;  providers: [AuthService, JwtStrategy],&#10;  exports: [AuthService],&#10;})&#10;export class AuthModule {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/auth/auth.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/auth/auth.service.ts" />
              <option name="updatedContent" value="import { ConflictException, Injectable, UnauthorizedException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Repository } from 'typeorm';&#10;import { User } from '../../database/entities/user.entity';&#10;import { JwtService } from '@nestjs/jwt';&#10;import * as argon2 from 'argon2';&#10;&#10;interface JwtPayload {&#10;  sub: number;&#10;  email: string;&#10;  name: string;&#10;}&#10;&#10;@Injectable()&#10;export class AuthService {&#10;  constructor(&#10;    @InjectRepository(User) private readonly usersRepo: Repository&lt;User&gt;,&#10;    private readonly jwt: JwtService,&#10;  ) {}&#10;&#10;  private signToken(user: User) {&#10;    const payload: JwtPayload = { sub: user.id, email: user.email, name: user.name };&#10;    return this.jwt.sign(payload);&#10;  }&#10;&#10;  async register(email: string, password: string, name: string) {&#10;    const exists = await this.usersRepo.findOne({ where: { email } });&#10;    if (exists) throw new ConflictException('Email ya está registrado');&#10;&#10;    const passwordHash = await argon2.hash(password);&#10;    const user = this.usersRepo.create({ email, name, passwordHash });&#10;    await this.usersRepo.save(user);&#10;&#10;    const accessToken = this.signToken(user);&#10;    return { user: { id: user.id, email: user.email, name: user.name }, accessToken };&#10;  }&#10;&#10;  async login(email: string, password: string) {&#10;    const user = await this.usersRepo.findOne({ where: { email } });&#10;    if (!user) throw new UnauthorizedException('Credenciales inválidas');&#10;    const ok = await argon2.verify(user.passwordHash, password);&#10;    if (!ok) throw new UnauthorizedException('Credenciales inválidas');&#10;    const accessToken = this.signToken(user);&#10;    return { user: { id: user.id, email: user.email, name: user.name }, accessToken };&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/auth/jwt.strategy.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/auth/jwt.strategy.ts" />
              <option name="updatedContent" value="import { Injectable } from '@nestjs/common';&#10;import { PassportStrategy } from '@nestjs/passport';&#10;import { ExtractJwt, Strategy } from 'passport-jwt';&#10;import { ConfigService } from '@nestjs/config';&#10;&#10;@Injectable()&#10;export class JwtStrategy extends PassportStrategy(Strategy) {&#10;  constructor(config: ConfigService) {&#10;    super({&#10;      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),&#10;      ignoreExpiration: false,&#10;      secretOrKey: config.get&lt;string&gt;('JWT_SECRET'),&#10;    });&#10;  }&#10;&#10;  async validate(payload: any) {&#10;    // Se adjunta al request como req.user&#10;    return payload;&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/progress/progress.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/progress/progress.controller.ts" />
              <option name="originalContent" value="import { Controller, Delete, Get, HttpCode, HttpStatus, NotFoundException, Param, Post, UseGuards } from '@nestjs/common';&#10;import { ProgressService } from './progress.service';&#10;import { JwtAuthGuard } from '../../common/guards/jwt-auth.guard';&#10;import { CurrentUser } from '../../common/decorators/current-user.decorator';&#10;&#10;@Controller()&#10;@UseGuards(JwtAuthGuard)&#10;export class ProgressController {&#10;  constructor(private readonly service: ProgressService) {}&#10;&#10;  @Get('me/progress')&#10;  async getProgress(@CurrentUser('sub') userId: number) {&#10;    return this.service.getProgress(userId);&#10;  }&#10;&#10;  @Get('me/algorithms')&#10;  async getLearned(@CurrentUser('sub') userId: number) {&#10;    return this.service.getLearnedAlgorithms(userId);&#10;  }&#10;&#10;  @Post('me/algorithms/:slug/learn')&#10;  async learn(@Param('slug') slug: string, @CurrentUser('sub') userId: number) {&#10;    const res = await this.service.learn(userId, slug);&#10;    if (!res) throw new NotFoundException('Algoritmo no encontrado');&#10;    // 201 si creado/activado, 200 si ya estaba activo&#10;    return res;&#10;  }&#10;&#10;  @Delete('me/algorithms/:slug/learn')&#10;  @HttpCode(HttpStatus.NO_CONTENT)&#10;  async unlearn(@Param('slug') slug: string, @CurrentUser('sub') userId: number) {&#10;    await this.service.unlearn(userId, slug);&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Controller, Delete, Get, HttpCode, HttpStatus, NotFoundException, Param, Post, Res, UseGuards } from '@nestjs/common';&#10;import { Response } from 'express';&#10;import { ProgressService } from './progress.service';&#10;import { JwtAuthGuard } from '../../common/guards/jwt-auth.guard';&#10;import { CurrentUser } from '../../common/decorators/current-user.decorator';&#10;&#10;@Controller()&#10;@UseGuards(JwtAuthGuard)&#10;export class ProgressController {&#10;  constructor(private readonly service: ProgressService) {}&#10;&#10;  @Get('me/progress')&#10;  async getProgress(@CurrentUser('sub') userId: number) {&#10;    return this.service.getProgress(userId);&#10;  }&#10;&#10;  @Get('me/algorithms')&#10;  async getLearned(@CurrentUser('sub') userId: number) {&#10;    return this.service.getLearnedAlgorithms(userId);&#10;  }&#10;&#10;  @Post('me/algorithms/:slug/learn')&#10;  async learn(@Param('slug') slug: string, @CurrentUser('sub') userId: number, @Res({ passthrough: true }) res: Response) {&#10;    const result = await this.service.learn(userId, slug);&#10;    if (!result) throw new NotFoundException('Algoritmo no encontrado');&#10;    if (result.created || result.reactivated) {&#10;      res.status(HttpStatus.CREATED);&#10;    } else if (result.alreadyActive) {&#10;      // Elegimos 200 OK para el caso idempotente&#10;      res.status(HttpStatus.OK);&#10;    }&#10;    return { slug: result.slug, learnedAt: result.learnedAt };&#10;  }&#10;&#10;  @Delete('me/algorithms/:slug/learn')&#10;  @HttpCode(HttpStatus.NO_CONTENT)&#10;  async unlearn(@Param('slug') slug: string, @CurrentUser('sub') userId: number) {&#10;    await this.service.unlearn(userId, slug);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/progress/progress.module.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/progress/progress.module.ts" />
              <option name="updatedContent" value="import { Module } from '@nestjs/common';&#10;import { TypeOrmModule } from '@nestjs/typeorm';&#10;import { ProgressService } from './progress.service';&#10;import { ProgressController } from './progress.controller';&#10;import { UserAlgorithm } from '../../database/entities/user-algorithm.entity';&#10;import { Algorithm } from '../../database/entities/algorithm.entity';&#10;import { User } from '../../database/entities/user.entity';&#10;&#10;@Module({&#10;  imports: [TypeOrmModule.forFeature([UserAlgorithm, Algorithm, User])],&#10;  controllers: [ProgressController],&#10;  providers: [ProgressService],&#10;})&#10;export class ProgressModule {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/modules/progress/progress.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/modules/progress/progress.service.ts" />
              <option name="originalContent" value="import { Injectable } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Repository } from 'typeorm';&#10;import { UserAlgorithm } from '../../database/entities/user-algorithm.entity';&#10;import { Algorithm } from '../../database/entities/algorithm.entity';&#10;import { User } from '../../database/entities/user.entity';&#10;&#10;@Injectable()&#10;export class ProgressService {&#10;  constructor(&#10;    @InjectRepository(UserAlgorithm) private readonly userAlgoRepo: Repository&lt;UserAlgorithm&gt;,&#10;    @InjectRepository(Algorithm) private readonly algoRepo: Repository&lt;Algorithm&gt;,&#10;    @InjectRepository(User) private readonly userRepo: Repository&lt;User&gt;,&#10;  ) {}&#10;&#10;  async getProgress(userId: number) {&#10;    const [learnedCount, total] = await Promise.all([&#10;      this.userAlgoRepo.count({ where: { user: { id: userId }, active: true } }),&#10;      this.algoRepo.count(),&#10;    ]);&#10;    const percent = total &gt; 0 ? Math.round((learnedCount / total) * 100) : 0;&#10;    return { learned: learnedCount, total, percent };&#10;  }&#10;&#10;  async getLearnedAlgorithms(userId: number) {&#10;    const relations = await this.userAlgoRepo.find({&#10;      where: { user: { id: userId }, active: true },&#10;      relations: ['algorithm'],&#10;      order: { learnedAt: 'DESC' },&#10;    });&#10;    return { learned: relations.map((r) =&gt; r.algorithm) };&#10;  }&#10;&#10;  async learn(userId: number, slug: string) {&#10;    const algorithm = await this.algoRepo.findOne({ where: { slug } });&#10;    if (!algorithm) return null;&#10;&#10;    const existing = await this.userAlgoRepo.findOne({&#10;      where: { user: { id: userId }, algorithm: { id: algorithm.id } },&#10;      relations: ['user', 'algorithm'],&#10;    });&#10;&#10;    const now = new Date();&#10;&#10;    if (existing) {&#10;      if (!existing.active) {&#10;        existing.active = true;&#10;        existing.learnedAt = now;&#10;        await this.userAlgoRepo.save(existing);&#10;      }&#10;      return { slug: algorithm.slug, learnedAt: existing.learnedAt };&#10;    }&#10;&#10;    const relation = this.userAlgoRepo.create({ user: { id: userId } as User, algorithm, active: true, learnedAt: now });&#10;    await this.userAlgoRepo.save(relation);&#10;    return { slug: algorithm.slug, learnedAt: relation.learnedAt };&#10;  }&#10;&#10;  async unlearn(userId: number, slug: string) {&#10;    const algorithm = await this.algoRepo.findOne({ where: { slug } });&#10;    if (!algorithm) return;&#10;    const existing = await this.userAlgoRepo.findOne({ where: { user: { id: userId }, algorithm: { id: algorithm.id } } });&#10;    if (!existing) return;&#10;    if (existing.active) {&#10;      existing.active = false;&#10;      await this.userAlgoRepo.save(existing);&#10;    }&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Repository } from 'typeorm';&#10;import { UserAlgorithm } from '../../database/entities/user-algorithm.entity';&#10;import { Algorithm } from '../../database/entities/algorithm.entity';&#10;import { User } from '../../database/entities/user.entity';&#10;&#10;@Injectable()&#10;export class ProgressService {&#10;  constructor(&#10;    @InjectRepository(UserAlgorithm) private readonly userAlgoRepo: Repository&lt;UserAlgorithm&gt;,&#10;    @InjectRepository(Algorithm) private readonly algoRepo: Repository&lt;Algorithm&gt;,&#10;    @InjectRepository(User) private readonly userRepo: Repository&lt;User&gt;,&#10;  ) {}&#10;&#10;  async getProgress(userId: number) {&#10;    const [learnedCount, total] = await Promise.all([&#10;      this.userAlgoRepo.count({ where: { user: { id: userId }, active: true } }),&#10;      this.algoRepo.count(),&#10;    ]);&#10;    const percent = total &gt; 0 ? Math.round((learnedCount / total) * 100) : 0;&#10;    return { learned: learnedCount, total, percent };&#10;  }&#10;&#10;  async getLearnedAlgorithms(userId: number) {&#10;    const relations = await this.userAlgoRepo.find({&#10;      where: { user: { id: userId }, active: true },&#10;      relations: ['algorithm'],&#10;      order: { learnedAt: 'DESC' },&#10;    });&#10;    return { learned: relations.map((r) =&gt; r.algorithm) };&#10;  }&#10;&#10;  async learn(userId: number, slug: string) {&#10;    const algorithm = await this.algoRepo.findOne({ where: { slug } });&#10;    if (!algorithm) return null;&#10;&#10;    const existing = await this.userAlgoRepo.findOne({&#10;      where: { user: { id: userId }, algorithm: { id: algorithm.id } },&#10;      relations: ['user', 'algorithm'],&#10;    });&#10;&#10;    const now = new Date();&#10;&#10;    if (existing) {&#10;      if (!existing.active) {&#10;        existing.active = true;&#10;        existing.learnedAt = now;&#10;        await this.userAlgoRepo.save(existing);&#10;        return { slug: algorithm.slug, learnedAt: existing.learnedAt, created: false, reactivated: true, alreadyActive: false };&#10;      }&#10;      return { slug: algorithm.slug, learnedAt: existing.learnedAt, created: false, reactivated: false, alreadyActive: true };&#10;    }&#10;&#10;    const relation = this.userAlgoRepo.create({ user: { id: userId } as User, algorithm, active: true, learnedAt: now });&#10;    await this.userAlgoRepo.save(relation);&#10;    return { slug: algorithm.slug, learnedAt: relation.learnedAt, created: true, reactivated: false, alreadyActive: false };&#10;  }&#10;&#10;  async unlearn(userId: number, slug: string) {&#10;    const algorithm = await this.algoRepo.findOne({ where: { slug } });&#10;    if (!algorithm) return;&#10;    const existing = await this.userAlgoRepo.findOne({ where: { user: { id: userId }, algorithm: { id: algorithm.id } } });&#10;    if (!existing) return;&#10;    if (existing.active) {&#10;      existing.active = false;&#10;      await this.userAlgoRepo.save(existing);&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;  db:&#10;    image: mariadb:10.6&#10;    environment:&#10;      MARIADB_DATABASE: algorithm_hub&#10;      MARIADB_USER: algouser&#10;      MARIADB_PASSWORD: algopass&#10;      MARIADB_ROOT_PASSWORD: rootpass&#10;    volumes:&#10;      - db_data:/var/lib/mysql&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;#  backend:&#10;#    build: ./backend&#10;#    env_file:&#10;#      - ./backend/.env&#10;#    environment:&#10;#      DB_HOST: db&#10;#      DB_PORT: 3306&#10;#      DB_USER: algouser&#10;#      DB_PASSWORD: algopass&#10;#      DB_NAME: algorithm_hub&#10;#    depends_on:&#10;#      db:&#10;#        condition: service_healthy&#10;#    ports:&#10;#      - &quot;3000:3000&quot;&#10;#&#10;#  frontend:&#10;#    build: ./frontend&#10;#    environment:&#10;#      - NODE_OPTIONS=--openssl-legacy-provider&#10;#    ports:&#10;#      - &quot;4200:80&quot;&#10;#    depends_on:&#10;#      - backend&#10;&#10;volumes:&#10;  db_data:&#10;" />
              <option name="updatedContent" value="services:&#10;  db:&#10;    image: mariadb:10.6&#10;    environment:&#10;      MARIADB_DATABASE: algorithm_hub&#10;      MARIADB_USER: algouser&#10;      MARIADB_PASSWORD: algopass&#10;      MARIADB_ROOT_PASSWORD: rootpass&#10;    volumes:&#10;      - db_data:/var/lib/mysql&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  phpmyadmin:&#10;    image: phpmyadmin/phpmyadmin:5&#10;    restart: unless-stopped&#10;    environment:&#10;      PMA_HOST: db&#10;      PMA_PORT: 3306&#10;      PMA_ARBITRARY: 0&#10;    depends_on:&#10;      - db&#10;    ports:&#10;      - &quot;8087:80&quot;&#10;&#10;#  backend:&#10;#    build: ./backend&#10;#    env_file:&#10;#      - ./backend/.env&#10;#    environment:&#10;#      DB_HOST: db&#10;#      DB_PORT: 3306&#10;#      DB_USER: algouser&#10;#      DB_PASSWORD: algopass&#10;#      DB_NAME: algorithm_hub&#10;#    depends_on:&#10;#      db:&#10;#        condition: service_healthy&#10;#    ports:&#10;#      - &quot;3000:3000&quot;&#10;#&#10;#  frontend:&#10;#    build: ./frontend&#10;#    environment:&#10;#      - NODE_OPTIONS=--openssl-legacy-provider&#10;#    ports:&#10;#      - &quot;4200:80&quot;&#10;#    depends_on:&#10;#      - backend&#10;&#10;volumes:&#10;  db_data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/algorithms.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/algorithms.md" />
              <option name="updatedContent" value="# Lista de los 20 algoritmos predefinidos&#10;&#10;Cada algoritmo incluye slug estable, categoría y dificultad. Las descripciones son breves y orientadas al aprendizaje.&#10;&#10;1) bubble-sort&#10;- Nombre: Bubble Sort&#10;- Categoría: sorting&#10;- Dificultad: easy&#10;- Descripción: Ordenamiento simple por intercambio de pares adyacentes.&#10;&#10;2) insertion-sort&#10;- Nombre: Insertion Sort&#10;- Categoría: sorting&#10;- Dificultad: easy&#10;- Descripción: Inserta elementos en su posición correcta construyendo una lista ordenada.&#10;&#10;3) selection-sort&#10;- Nombre: Selection Sort&#10;- Categoría: sorting&#10;- Dificultad: easy&#10;- Descripción: Selecciona el mínimo sucesivo y lo coloca al inicio.&#10;&#10;4) merge-sort&#10;- Nombre: Merge Sort&#10;- Categoría: sorting&#10;- Dificultad: medium&#10;- Descripción: Divide y vencerás, combina listas ordenadas eficientemente.&#10;&#10;5) quick-sort&#10;- Nombre: Quick Sort&#10;- Categoría: sorting&#10;- Dificultad: medium&#10;- Descripción: Particiona en torno a un pivote y ordena recursivamente.&#10;&#10;6) binary-search&#10;- Nombre: Binary Search&#10;- Categoría: search&#10;- Dificultad: easy&#10;- Descripción: Búsqueda logarítmica en arreglos ordenados.&#10;&#10;7) breadth-first-search&#10;- Nombre: Breadth-First Search (BFS)&#10;- Categoría: graph&#10;- Dificultad: easy&#10;- Descripción: Recorre grafos por niveles desde un nodo fuente.&#10;&#10;8) depth-first-search&#10;- Nombre: Depth-First Search (DFS)&#10;- Categoría: graph&#10;- Dificultad: easy&#10;- Descripción: Recorre grafos explorando en profundidad.&#10;&#10;9) dijkstra&#10;- Nombre: Dijkstra&#10;- Categoría: graph&#10;- Dificultad: medium&#10;- Descripción: Caminos mínimos en grafos con pesos no negativos.&#10;&#10;10) bellman-ford&#10;- Nombre: Bellman-Ford&#10;- Categoría: graph&#10;- Dificultad: medium&#10;- Descripción: Caminos mínimos con detección de ciclos negativos.&#10;&#10;11) floyd-warshall&#10;- Nombre: Floyd-Warshall&#10;- Categoría: graph&#10;- Dificultad: medium&#10;- Descripción: Todos los pares de caminos mínimos en grafos ponderados.&#10;&#10;12) kruskal&#10;- Nombre: Kruskal&#10;- Categoría: graph&#10;- Dificultad: medium&#10;- Descripción: Árbol de expansión mínima usando conjuntos disjuntos.&#10;&#10;13) prim&#10;- Nombre: Prim&#10;- Categoría: graph&#10;- Dificultad: medium&#10;- Descripción: Árbol de expansión mínima con crecimiento incremental.&#10;&#10;14) kmp&#10;- Nombre: Knuth–Morris–Pratt (KMP)&#10;- Categoría: string&#10;- Dificultad: medium&#10;- Descripción: Búsqueda de patrones con prefijos/sufijos eficientes.&#10;&#10;15) rabin-karp&#10;- Nombre: Rabin-Karp&#10;- Categoría: string&#10;- Dificultad: medium&#10;- Descripción: Búsqueda de cadenas usando hashing rodante.&#10;&#10;16) knapsack-01&#10;- Nombre: 0/1 Knapsack&#10;- Categoría: dp&#10;- Dificultad: medium&#10;- Descripción: Selección óptima de ítems con restricción de capacidad.&#10;&#10;17) lis&#10;- Nombre: Longest Increasing Subsequence (LIS)&#10;- Categoría: dp&#10;- Dificultad: medium&#10;- Descripción: Subsecuencia estrictamente creciente más larga.&#10;&#10;18) topological-sort&#10;- Nombre: Topological Sort&#10;- Categoría: graph&#10;- Dificultad: easy&#10;- Descripción: Orden lineal de DAG basado en dependencias.&#10;&#10;19) activity-selection&#10;- Nombre: Activity Selection&#10;- Categoría: greedy&#10;- Dificultad: easy&#10;- Descripción: Selección de actividades compatibles maximizando cantidad.&#10;&#10;20) binary-tree-traversals&#10;- Nombre: Recorridos de Árbol Binario (In/Pre/Post)&#10;- Categoría: tree&#10;- Dificultad: easy&#10;- Descripción: Recorridos fundamentales en árboles binarios.&#10;&#10;Notas&#10;- Los slugs son únicos y estables.&#10;- Pueden ampliarse con campos como ejemplos, complejidad temporal/espacial y links.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/api.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/api.md" />
              <option name="updatedContent" value="# API de Algorithm Hub&#10;&#10;Base&#10;- URL base: /api/v1&#10;- Autenticación: JWT en Authorization: Bearer &lt;token&gt;&#10;- Formato: JSON&#10;&#10;Auth&#10;- POST /auth/register&#10;  - body: { email, password, name }&#10;  - 201: { user: { id, email, name }, accessToken }&#10;  - 400/409: validación o email duplicado&#10;- POST /auth/login&#10;  - body: { email, password }&#10;  - 200: { user: { id, email, name }, accessToken }&#10;  - 401: credenciales inválidas&#10;&#10;Algoritmos&#10;- GET /algorithms&#10;  - query: search?, category?, page=1, pageSize=20&#10;  - 200: { items: Algorithm[], page, pageSize, total }&#10;- GET /algorithms/:slug&#10;  - 200: Algorithm&#10;  - 404: no encontrado&#10;&#10;Progreso (rutas protegidas)&#10;- GET /me/progress&#10;  - 200: { learned: number, total: number, percent: number }&#10;- GET /me/algorithms&#10;  - 200: { learned: Algorithm[] }&#10;- POST /me/algorithms/:slug/learn&#10;  - 201: { slug, learnedAt }&#10;  - Idempotente: si ya estaba aprendido, retorna 200/204&#10;- DELETE /me/algorithms/:slug/learn&#10;  - 204 sin contenido; si no existía, 204 igualmente&#10;&#10;Esquemas&#10;- Algorithm&#10;  - { id, slug, name, category, difficulty, description }&#10;- Error&#10;  - { statusCode, message, error }&#10;&#10;Códigos y errores&#10;- 200/201/204 éxito; 400 validación; 401 auth; 403 permisos; 404 no existe; 409 conflicto; 500 error interno.&#10;&#10;Paginación&#10;- page y pageSize (máx recomendado 50). Respuesta incluye total para calcular páginas.&#10;&#10;Filtros&#10;- search: texto en nombre/slug/descripcion&#10;- category: sorting|search|graph|dp|string&#10;&#10;Notas&#10;- Tiempos en ISO-8601 UTC.&#10;- Versionado: prefijo /api/v1.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/architecture.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/architecture.md" />
              <option name="updatedContent" value="# Arquitectura de Algorithm Hub&#10;&#10;Objetivo&#10;Aplicación full‑stack para aprender algoritmos, con frontend en Angular y backend en NestJS. Persistencia con TypeORM sobre MariaDB. Autenticación JWT. Se prioriza Clean Code, SOLID, pruebas automatizadas y DX.&#10;&#10;Visión general&#10;- Frontend (Angular): SPA que permite registro/login, listar 20 algoritmos predefinidos, marcar como aprendido y ver progreso global.&#10;- Backend (NestJS): API REST con módulos de auth, usuarios, algoritmos y progreso. TypeORM gestiona entidades, migraciones y seed inicial.&#10;- Base de datos (MariaDB): Esquema normalizado con Users, Algorithms y UserAlgorithms (tabla de unión).&#10;&#10;Estructura del repositorio (monorepo simple)&#10;- frontend/ Aplicación Angular&#10;  - src/app/&#10;    - core/ (servicios transversales: auth, http, interceptors)&#10;    - shared/ (componentes y utilidades compartidas)&#10;    - features/&#10;      - auth/&#10;      - algorithms/&#10;      - progress/&#10;    - app-routing.module.ts&#10;- backend/ API NestJS&#10;  - src/&#10;    - app.module.ts&#10;    - config/ (configuración y validación env)&#10;    - common/ (pipes, filters, interceptors, decorators)&#10;    - modules/&#10;      - auth/&#10;      - users/&#10;      - algorithms/&#10;      - progress/ (o user-algorithms)&#10;    - database/&#10;      - entities/&#10;      - migrations/&#10;      - seeds/&#10;- docs/ Documentación&#10;&#10;Frontend (Angular)&#10;- Versiones: Angular 17+, TypeScript estricto.&#10;- State: Servicios inyectables; NgRx opcional si el estado crece.&#10;- Rutas principales:&#10;  - /auth (login/registro)&#10;  - /algorithms (listado y detalle)&#10;  - /progress (resumen global)&#10;- Módulos por feature, lazy-loading cuando aplique.&#10;- Servicios clave:&#10;  - AuthService: login, register, refresh (si aplica), gestión de token en memoria/Storage.&#10;  - AlgorithmsService: list, getById, toggleLearned.&#10;  - ProgressService: resumen y lista de aprendidos.&#10;- Interceptores:&#10;  - AuthInterceptor: añade Authorization: Bearer &lt;token&gt;.&#10;  - HttpErrorInterceptor: manejo uniforme de errores.&#10;- Guards: AuthGuard para rutas protegidas.&#10;- UI/UX: componentes accesibles, feedback de carga/errores.&#10;- Testing: Jest o Karma + Jasmine. Pruebas de componentes y servicios.&#10;&#10;Backend (NestJS)&#10;- Versiones: NestJS 10+, TypeScript estricto.&#10;- Módulos:&#10;  - AuthModule: registro, login, JWT. Hash con Argon2.&#10;  - UsersModule: perfil del usuario autenticado.&#10;  - AlgorithmsModule: CRUD limitado (solo lectura pública; administración futura opcional).&#10;  - ProgressModule: operaciones sobre aprendizaje de algoritmos por usuario.&#10;- Capas por módulo:&#10;  - Controller: contratos HTTP y validación con DTOs (class-validator/class-transformer).&#10;  - Service: casos de uso y orquestación.&#10;  - Repository: acceso a datos con TypeORM (repositorios por entidad).&#10;- Configuración:&#10;  - ConfigModule global. Validación de env con Joi o Zod.&#10;  - Prefix global /api/v1. CORS habilitado para frontend.&#10;- Persistencia:&#10;  - Entidades: User, Algorithm, UserAlgorithm (ManyToMany con payload learnedAt).&#10;  - Migraciones versionadas y seed inicial de 20 algoritmos.&#10;- Seguridad:&#10;  - JWT Access Token. Helmet, rate limiting, CORS restringido.&#10;  - Hash de contraseñas con Argon2, política de contraseñas y validaciones fuertes.&#10;- Observabilidad:&#10;  - Logger de Nest (p.ej., Pino con nestjs-pino). Filtros de excepciones.&#10;- Testing:&#10;  - Unit tests por servicio/controlador. e2e con supertest.&#10;&#10;Flujos principales&#10;- Registro/login: usuario obtiene JWT y accede a rutas protegidas.&#10;- Listado de algoritmos: consulta paginada/filtrada.&#10;- Marcar como aprendido: inserta en UserAlgorithm (o borra para desmarcar).&#10;- Progreso global: (aprendidos/20) en porcentaje y conteos.&#10;&#10;Migrations y seeds&#10;- Migraciones para crear tablas e índices.&#10;- Seed para insertar los 20 algoritmos con claves estables (slugs) y metadatos.&#10;&#10;Calidad y DX&#10;- ESLint + Prettier. tsconfig strict.&#10;- Husky + lint-staged para pre-commit.&#10;- Conventional Commits + changelog automático opcional.&#10;&#10;Riesgos y mitigaciones&#10;- Consistencia de datos: constraints y transacciones al marcar aprendido.&#10;- N+1 queries: usar relaciones y select adecuados.&#10;- Escalabilidad: cache selectiva para listado de algoritmos (opcional).&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/coding-standards.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/coding-standards.md" />
              <option name="updatedContent" value="# Estándares de código (Clean Code)&#10;&#10;Objetivo&#10;Asegurar un código mantenible, legible y consistente en Algorithm Hub (Angular + NestJS, TypeScript estricto).&#10;&#10;Principios generales&#10;- KISS, DRY y SOLID&#10;- Nombres claros y específicos (dominio y propósito)&#10;- Pequeñas unidades: funciones &lt; 30 líneas, clases cohesivas&#10;- Evitar comentarios redundantes; preferir código autoexplicativo&#10;- Fail fast: validar temprano con DTOs y tipos estrictos&#10;&#10;TypeScript&#10;- &quot;strict&quot;: true en tsconfig&#10;- Tipar todo (parámetros, retornos, propiedades)&#10;- Evitar any; usar unknown y refinar&#10;- Preferir tipos readonly e inmutabilidad cuando aplique&#10;&#10;Formateo y lint&#10;- ESLint + Prettier (reglas consistentes en frontend y backend)&#10;- Scripts:&#10;  - lint, lint:fix, format&#10;- Pre-commit con Husky + lint-staged (formateo y lint parcial)&#10;&#10;Git y commits&#10;- Conventional Commits (feat, fix, chore, refactor, docs, test, perf, ci)&#10;- PRs pequeños y enfocados, descripción clara, capturas si aplica&#10;- Rebase antes de merge, squash opcional&#10;&#10;Frontend (Angular)&#10;- Estructura por features (módulos lazy cuando aplique)&#10;- Componentes dumb/smart: presentación vs. contenedor&#10;- Servicios inyectables para lógica de negocio y acceso a API&#10;- Usa OnPush cuando sea posible; evita trabajo innecesario en plantillas&#10;- Interceptores para auth y manejo de errores&#10;- Guards para rutas privadas&#10;- No lógica de negocio en componentes; extraer a servicios&#10;- Evitar estado global salvo necesidad; considerar NgRx si escala&#10;- Accesibilidad (a11y), roles/labels, estados de carga/errores&#10;&#10;Backend (NestJS)&#10;- Módulos por dominio (auth, users, algorithms, progress)&#10;- Capas claras: Controller (I/O), Service (casos de uso), Repository (persistencia)&#10;- DTOs con class-validator/class-transformer; no exponer entidades directamente&#10;- Excepciones de Nest (HttpException) y filtros globales para consistencia&#10;- ConfigModule con validación de env (Joi/Zod)&#10;- Repositorios TypeORM tipados; evitar consultas crudas salvo necesidad&#10;- Idempotencia en endpoints críticos (marcar aprendido)&#10;&#10;Base de datos&#10;- Migraciones versionadas; no usar synchronize en producción&#10;- Seeds idempotentes por slug&#10;- Constraints e índices para integridad y performance&#10;- Transacciones al mutar relaciones N:M&#10;&#10;Pruebas&#10;- Unit: servicios y utilidades (Jest)&#10;- e2e: endpoints críticos (supertest)&#10;- Cobertura mínima sugerida: 80%&#10;- Doble pirámide: backend y frontend con suites independientes&#10;&#10;Errores y logging&#10;- Manejo centralizado de errores HTTP&#10;- Logs estructurados (pino) con niveles; sin PII sensible&#10;- Trazas útiles: requestId/correlationId&#10;&#10;Seguridad&#10;- Argon2 para contraseñas, JWT con expiración&#10;- Helmet, CORS restringido, rate limiting&#10;- Validación de entrada estricta y saneamiento&#10;&#10;Rendimiento&#10;- Paginación por defecto, límites de pageSize&#10;- Cache opcional para catálogos estáticos (algorithms)&#10;- Evitar N+1; usar relaciones y selects necesarios&#10;&#10;Revisión de código&#10;- Checklist: lint limpio, pruebas pasan, nombres claros, sin código muerto, docs actualizadas&#10;- Al menos 1 aprobación antes de merge a main&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/contributing.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/contributing.md" />
              <option name="updatedContent" value="# Contribución&#10;&#10;Gracias por tu interés en contribuir a Algorithm Hub. Este documento describe el flujo recomendado para colaborar, estándares y calidad.&#10;&#10;Requisitos&#10;- Node.js &gt;= 20 y pnpm &gt;= 9&#10;- MariaDB local o vía Docker&#10;- ESLint + Prettier, Husky configurado&#10;&#10;Flujo de trabajo&#10;1) Fork y branch por feature/fix&#10;- git checkout -b feat/nombre-corto&#10;2) Desarrollo&#10;- Mantén cambios pequeños y atómicos&#10;- Añade/actualiza pruebas y docs&#10;3) Lint y pruebas&#10;- pnpm lint &amp;&amp; pnpm test&#10;4) Commits convencionales&#10;- feat: nueva funcionalidad&#10;- fix: corrección de bug&#10;- docs:, test:, chore:, refactor:, perf:, ci:&#10;5) Pull Request&#10;- Descripción clara, capturas si aplica&#10;- Checklist: lint ok, tests ok, docs actualizadas&#10;- Solicita revisión&#10;&#10;Estándares&#10;- Ver docs/coding-standards.md&#10;- TypeScript estricto en frontend y backend&#10;- DTOs con validación, no exponer entidades directamente&#10;&#10;Pruebas&#10;- Cobertura mínima sugerida 80%&#10;- Backend: unit y e2e (supertest)&#10;- Frontend: unit (componentes y servicios)&#10;&#10;Revisiones&#10;- Al menos 1 aprobación antes de merge&#10;- Resolver comentarios antes de fusionar&#10;&#10;Seguridad&#10;- No incluir secretos en commits&#10;- Reportar vulnerabilidades por canal privado (ver docs/security.md)&#10;&#10;Hoja de ruta&#10;- Issues etiquetados como good first issue para nuevos contribuidores&#10;- Usa discusiones para propuestas de nuevas features&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/db.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/db.md" />
              <option name="updatedContent" value="# Esquema de datos&#10;&#10;Entidades principales&#10;- User&#10;  - id (uuid)&#10;  - email (único)&#10;  - name&#10;  - passwordHash&#10;  - createdAt, updatedAt&#10;  - Índices: email único&#10;&#10;- Algorithm&#10;  - id (uuid)&#10;  - slug (único, estable)&#10;  - name&#10;  - category (sorting|search|graph|dp|string|math|greedy|tree|other)&#10;  - difficulty (easy|medium|hard)&#10;  - description&#10;  - createdAt, updatedAt&#10;  - Índices: slug único, category, difficulty&#10;&#10;- UserAlgorithm (relación N:M)&#10;  - id (uuid)&#10;  - userId (FK -&gt; User.id ON DELETE CASCADE)&#10;  - algorithmId (FK -&gt; Algorithm.id ON DELETE CASCADE)&#10;  - learnedAt (datetime)&#10;  - Restricción única: (userId, algorithmId)&#10;  - Índices: userId, algorithmId&#10;&#10;Relaciones&#10;- User 1..* UserAlgorithm *..1 Algorithm&#10;&#10;Migraciones&#10;- Todas las modificaciones de esquema se realizan mediante migraciones versionadas.&#10;- Orden recomendado&#10;  1) create-users&#10;  2) create-algorithms&#10;  3) create-user-algorithms&#10;  4) seed-algorithms-20-items (solo inserciones idempotentes por slug)&#10;&#10;Semillas (seed)&#10;- Lista de 20 algoritmos con slugs y metadatos en docs/algorithms.md.&#10;- Seed debe ser idempotente: upsert por slug.&#10;&#10;Ejemplo de consultas típicas&#10;- Listar algoritmos aprendidos por usuario: join UserAlgorithm -&gt; Algorithm filtrando por userId.&#10;- Progreso: COUNT(UserAlgorithm WHERE userId = X) / 20.&#10;&#10;Buenas prácticas de base de datos&#10;- Usar transacciones al marcar aprendido/desmarcar para evitar condiciones de carrera.&#10;- Validar entradas con niveles en app (DTOs) y constraints en DB.&#10;- Evitar N+1 con relations y select optimizados.&#10;- Añadir índices si aparecen cuellos de botella (p.ej., userId + algorithmId ya indexados).&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/deploy.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/deploy.md" />
              <option name="updatedContent" value="# Despliegue (Docker Compose)&#10;&#10;Objetivo&#10;Levantar MariaDB, backend (NestJS) y frontend (Angular) con Docker Compose.&#10;&#10;Requisitos&#10;- Docker Desktop actualizado&#10;- Variables de entorno en backend/.env&#10;&#10;docker-compose.yml (ejemplo)&#10;version: &quot;3.9&quot;&#10;services:&#10;  db:&#10;    image: mariadb:10.6&#10;    environment:&#10;      MARIADB_DATABASE: algorithm_hub&#10;      MARIADB_USER: algouser&#10;      MARIADB_PASSWORD: algopass&#10;      MARIADB_ROOT_PASSWORD: rootpass&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - db_data:/var/lib/mysql&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  backend:&#10;    build: ./backend&#10;    env_file:&#10;      - ./backend/.env&#10;    environment:&#10;      DB_HOST: db&#10;      DB_PORT: 3306&#10;      DB_USER: algouser&#10;      DB_PASSWORD: algopass&#10;      DB_NAME: algorithm_hub&#10;    depends_on:&#10;      db:&#10;        condition: service_healthy&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;&#10;  frontend:&#10;    build: ./frontend&#10;    environment:&#10;      - NODE_OPTIONS=--openssl-legacy-provider&#10;    ports:&#10;      - &quot;4200:80&quot;&#10;    depends_on:&#10;      - backend&#10;&#10;volumes:&#10;  db_data:&#10;&#10;Pasos&#10;1) Preparar backend/.env con JWT_SECRET y DB_* (ver docs/setup-local.md)&#10;2) Construir e iniciar&#10;- docker compose up -d --build&#10;3) Ejecutar migraciones y seed (si no están automatizadas en entrypoint)&#10;- docker compose exec backend npm run typeorm:migration:run&#10;- docker compose exec backend npm run seed:run&#10;4) Acceder&#10;- API: http://localhost:3000/api/v1&#10;- Web: http://localhost:4200&#10;&#10;Producción&#10;- Usar imágenes multi-stage para backend y frontend (Nginx para servir Angular)&#10;- Añadir reverse proxy (Nginx/Caddy) con HTTPS (Let's Encrypt)&#10;- Configurar variables de entorno seguras y secretos (docker secrets)&#10;- Habilitar logs y metrics (por ejemplo, a stdout + stack ELK/EFK)&#10;&#10;Troubleshooting&#10;- db no saludable: revisar logs con docker compose logs db&#10;- backend no arranca: validar variables y conectividad a db&#10;- puertos en uso: ajustar mapeos en compose&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/security.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/security.md" />
              <option name="updatedContent" value="# Seguridad&#10;&#10;Objetivo&#10;Definir controles de seguridad para Algorithm Hub (Angular + NestJS, TypeORM, MariaDB) desde el desarrollo hasta producción.&#10;&#10;Autenticación y sesiones&#10;- JWT (HS256/HS512) con expiración corta (ej. 15–60 min). Campo aud/iss opcional.&#10;- Almacenamiento del token en frontend: en memoria. Evitar localStorage (riesgo XSS). Opcional cookie HttpOnly+Secure+SameSite=Lax si se configura en backend.&#10;- Cabecera Authorization: Bearer &lt;token&gt; en todas las peticiones a rutas protegidas.&#10;- Rotación/Revocación: considerar refresh token en una iteración futura.&#10;&#10;Contraseñas&#10;- Hash con Argon2id (costes ajustados a servidor). No guardar contraseñas en texto plano.&#10;- Política de contraseñas mínimas (longitud, complejidad razonable) y bloqueo por intentos (rate limit por IP/usuario).&#10;&#10;Validación y saneamiento&#10;- DTOs con class-validator y class-transformer (whitelist: true, forbidNonWhitelisted: true).&#10;- Saneamiento de entradas (escape/sanitize) y límites de tamaño en payloads.&#10;&#10;Seguridad HTTP&#10;- Helmet habilitado (incluye X-Content-Type-Options, X-Frame-Options, etc.).&#10;- CORS restringido al dominio del frontend y métodos necesarios.&#10;- Rate limiting y protección básica anti-bruteforce en /auth.&#10;- HSTS en producción (detrás de HTTPS). Configurar Content-Security-Policy estricta.&#10;&#10;Base de datos&#10;- Usuario de DB con privilegios mínimos para la app.&#10;- Constraints y claves únicas (email, slug) para integridad.&#10;- Queries parametrizadas (TypeORM) para prevenir inyecciones.&#10;- Backups periódicos y cifrado en reposo (según infraestructura).&#10;&#10;Gestión de secretos&#10;- .env fuera del control de versiones. Variables: JWT_SECRET, DB_*.&#10;- Producción: usar gestor de secretos (AWS Secrets Manager, Vault, etc.). Rotación periódica.&#10;&#10;Logs y monitoreo&#10;- Logs estructurados sin PII sensible. Redactar tokens/contraseñas.&#10;- Trazabilidad con requestId/correlationId.&#10;- Alertas ante picos de 401/403/5xx y errores de DB.&#10;&#10;Dependencias y CI/CD&#10;- Auditorías periódicas (npm audit, osv-scanner) y actualización continua (Renovate).&#10;- Escaneo de secretos en PRs, SAST y pruebas e2e en CI.&#10;- Build inmutable y firmas/verificación de integridad de imágenes de contenedor.&#10;&#10;Frontend&#10;- Sanitizar entradas en formularios, evitar innerHTML.&#10;- Uso de Interceptor para añadir Authorization y manejar 401 de forma centralizada.&#10;- Evitar exponer datos sensibles en consola o mensajes de error.&#10;&#10;Checklist de despliegue&#10;- [ ] HTTPS habilitado (TLS moderno) y HSTS&#10;- [ ] CORS restringido&#10;- [ ] Helmet + CSP configurados&#10;- [ ] Rate limiting activo&#10;- [ ] Variables y secretos seguros (no en repo)&#10;- [ ] Usuario DB con privilegios mínimos&#10;- [ ] Backups y monitoreo configurados&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/Dockerfile" />
              <option name="originalContent" value="# Frontend (Angular) multi-stage&#10;FROM node:20-alpine AS deps&#10;WORKDIR /app&#10;RUN apk add --no-cache libc6-compat&#10;COPY package*.json ./&#10;RUN npm install&#10;&#10;FROM deps AS build&#10;COPY angular.json tsconfig*.json ./&#10;COPY .vscode ./.vscode&#10;COPY src ./src&#10;RUN npm run build&#10;&#10;FROM nginx:alpine AS runner&#10;WORKDIR /usr/share/nginx/html&#10;# Limpiar contenido por defecto y copiar build&#10;RUN rm -rf ./*&#10;COPY --from=build /app/dist/frontend ./&#10;# Config Nginx para SPA&#10;COPY nginx.conf /etc/nginx/conf.d/default.conf&#10;EXPOSE 80&#10;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]&#10;" />
              <option name="updatedContent" value="# Frontend (Angular) multi-stage&#10;FROM node:20-alpine AS deps&#10;WORKDIR /app&#10;RUN apk add --no-cache libc6-compat&#10;COPY package*.json ./&#10;RUN npm install&#10;&#10;FROM deps AS build&#10;COPY angular.json tsconfig*.json ./&#10;COPY .vscode ./.vscode&#10;COPY src ./src&#10;RUN npm run build&#10;&#10;FROM nginx:alpine AS runner&#10;WORKDIR /usr/share/nginx/html&#10;ENV NODE_ENV=production&#10;# Limpiar contenido por defecto&#10;RUN rm -rf ./*&#10;# Copiar build de forma robusta (soporta outputs con y sin carpeta &quot;browser&quot;)&#10;COPY --from=build /app/dist /tmp/dist&#10;RUN set -eux; \&#10;    if [ -f /tmp/dist/frontend/index.html ]; then \&#10;      cp -r /tmp/dist/frontend/* ./; \&#10;    elif [ -f /tmp/dist/frontend/browser/index.html ]; then \&#10;      cp -r /tmp/dist/frontend/browser/* ./; \&#10;    elif [ -f /tmp/dist/index.html ]; then \&#10;      cp -r /tmp/dist/* ./; \&#10;    elif [ -f /tmp/dist/browser/index.html ]; then \&#10;      cp -r /tmp/dist/browser/* ./; \&#10;    else \&#10;      echo 'No se encontró index.html en el build de Angular' &amp;&amp; ls -R /tmp/dist &amp;&amp; exit 1; \&#10;    fi&#10;# Config Nginx para SPA + proxy /api&#10;COPY nginx.conf /etc/nginx/conf.d/default.conf&#10;EXPOSE 80&#10;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/angular.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/angular.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;./node_modules/@angular/cli/lib/config/schema.json&quot;,&#10;  &quot;version&quot;: 1,&#10;  &quot;newProjectRoot&quot;: &quot;projects&quot;,&#10;  &quot;projects&quot;: {&#10;    &quot;frontend&quot;: {&#10;      &quot;projectType&quot;: &quot;application&quot;,&#10;      &quot;schematics&quot;: {&#10;        &quot;@schematics/angular:component&quot;: {&#10;          &quot;style&quot;: &quot;scss&quot;&#10;        }&#10;      },&#10;      &quot;root&quot;: &quot;&quot;,&#10;      &quot;sourceRoot&quot;: &quot;src&quot;,&#10;      &quot;prefix&quot;: &quot;app&quot;,&#10;      &quot;architect&quot;: {&#10;        &quot;build&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:application&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;outputPath&quot;: &quot;dist/frontend&quot;,&#10;            &quot;index&quot;: &quot;src/index.html&quot;,&#10;            &quot;browser&quot;: &quot;src/main.ts&quot;,&#10;            &quot;polyfills&quot;: [&#10;              &quot;zone.js&quot;&#10;            ],&#10;            &quot;tsConfig&quot;: &quot;tsconfig.app.json&quot;,&#10;            &quot;inlineStyleLanguage&quot;: &quot;scss&quot;,&#10;            &quot;assets&quot;: [&#10;              &quot;src/favicon.ico&quot;,&#10;              &quot;src/assets&quot;&#10;            ],&#10;            &quot;styles&quot;: [&#10;              &quot;src/styles.scss&quot;&#10;            ],&#10;            &quot;scripts&quot;: []&#10;          },&#10;          &quot;configurations&quot;: {&#10;            &quot;production&quot;: {&#10;              &quot;budgets&quot;: [&#10;                {&#10;                  &quot;type&quot;: &quot;initial&quot;,&#10;                  &quot;maximumWarning&quot;: &quot;500kb&quot;,&#10;                  &quot;maximumError&quot;: &quot;1mb&quot;&#10;                },&#10;                {&#10;                  &quot;type&quot;: &quot;anyComponentStyle&quot;,&#10;                  &quot;maximumWarning&quot;: &quot;2kb&quot;,&#10;                  &quot;maximumError&quot;: &quot;4kb&quot;&#10;                }&#10;              ],&#10;              &quot;outputHashing&quot;: &quot;all&quot;&#10;            },&#10;            &quot;development&quot;: {&#10;              &quot;optimization&quot;: false,&#10;              &quot;extractLicenses&quot;: false,&#10;              &quot;sourceMap&quot;: true&#10;            }&#10;          },&#10;          &quot;defaultConfiguration&quot;: &quot;production&quot;&#10;        },&#10;        &quot;serve&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;,&#10;          &quot;configurations&quot;: {&#10;            &quot;production&quot;: {&#10;              &quot;buildTarget&quot;: &quot;frontend:build:production&quot;&#10;            },&#10;            &quot;development&quot;: {&#10;              &quot;buildTarget&quot;: &quot;frontend:build:development&quot;&#10;            }&#10;          },&#10;          &quot;defaultConfiguration&quot;: &quot;development&quot;&#10;        },&#10;        &quot;extract-i18n&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:extract-i18n&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;buildTarget&quot;: &quot;frontend:build&quot;&#10;          }&#10;        },&#10;        &quot;test&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:karma&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;polyfills&quot;: [&#10;              &quot;zone.js&quot;,&#10;              &quot;zone.js/testing&quot;&#10;            ],&#10;            &quot;tsConfig&quot;: &quot;tsconfig.spec.json&quot;,&#10;            &quot;inlineStyleLanguage&quot;: &quot;scss&quot;,&#10;            &quot;assets&quot;: [&#10;              &quot;src/favicon.ico&quot;,&#10;              &quot;src/assets&quot;&#10;            ],&#10;            &quot;styles&quot;: [&#10;              &quot;src/styles.scss&quot;&#10;            ],&#10;            &quot;scripts&quot;: []&#10;          }&#10;        }&#10;      }&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;$schema&quot;: &quot;./node_modules/@angular/cli/lib/config/schema.json&quot;,&#10;  &quot;version&quot;: 1,&#10;  &quot;newProjectRoot&quot;: &quot;projects&quot;,&#10;  &quot;projects&quot;: {&#10;    &quot;frontend&quot;: {&#10;      &quot;projectType&quot;: &quot;application&quot;,&#10;      &quot;schematics&quot;: {&#10;        &quot;@schematics/angular:component&quot;: {&#10;          &quot;style&quot;: &quot;scss&quot;&#10;        }&#10;      },&#10;      &quot;root&quot;: &quot;&quot;,&#10;      &quot;sourceRoot&quot;: &quot;src&quot;,&#10;      &quot;prefix&quot;: &quot;app&quot;,&#10;      &quot;architect&quot;: {&#10;        &quot;build&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:application&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;outputPath&quot;: &quot;dist/frontend&quot;,&#10;            &quot;index&quot;: &quot;src/index.html&quot;,&#10;            &quot;browser&quot;: &quot;src/main.ts&quot;,&#10;            &quot;polyfills&quot;: [&#10;              &quot;zone.js&quot;&#10;            ],&#10;            &quot;tsConfig&quot;: &quot;tsconfig.app.json&quot;,&#10;            &quot;inlineStyleLanguage&quot;: &quot;scss&quot;,&#10;            &quot;assets&quot;: [&#10;              &quot;src/favicon.ico&quot;,&#10;              &quot;src/assets&quot;&#10;            ],&#10;            &quot;styles&quot;: [&#10;              &quot;src/styles.scss&quot;&#10;            ],&#10;            &quot;scripts&quot;: []&#10;          },&#10;          &quot;configurations&quot;: {&#10;            &quot;production&quot;: {&#10;              &quot;budgets&quot;: [&#10;                {&#10;                  &quot;type&quot;: &quot;initial&quot;,&#10;                  &quot;maximumWarning&quot;: &quot;500kb&quot;,&#10;                  &quot;maximumError&quot;: &quot;1mb&quot;&#10;                },&#10;                {&#10;                  &quot;type&quot;: &quot;anyComponentStyle&quot;,&#10;                  &quot;maximumWarning&quot;: &quot;2kb&quot;,&#10;                  &quot;maximumError&quot;: &quot;4kb&quot;&#10;                }&#10;              ],&#10;              &quot;outputHashing&quot;: &quot;all&quot;,&#10;              &quot;fileReplacements&quot;: [&#10;                {&#10;                  &quot;replace&quot;: &quot;src/environments/environment.development.ts&quot;,&#10;                  &quot;with&quot;: &quot;src/environments/environment.ts&quot;&#10;                }&#10;              ]&#10;            },&#10;            &quot;development&quot;: {&#10;              &quot;optimization&quot;: false,&#10;              &quot;extractLicenses&quot;: false,&#10;              &quot;sourceMap&quot;: true&#10;            }&#10;          },&#10;          &quot;defaultConfiguration&quot;: &quot;production&quot;&#10;        },&#10;        &quot;serve&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;,&#10;          &quot;configurations&quot;: {&#10;            &quot;production&quot;: {&#10;              &quot;buildTarget&quot;: &quot;frontend:build:production&quot;&#10;            },&#10;            &quot;development&quot;: {&#10;              &quot;buildTarget&quot;: &quot;frontend:build:development&quot;&#10;            }&#10;          },&#10;          &quot;defaultConfiguration&quot;: &quot;development&quot;&#10;        },&#10;        &quot;extract-i18n&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:extract-i18n&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;buildTarget&quot;: &quot;frontend:build&quot;&#10;          }&#10;        },&#10;        &quot;test&quot;: {&#10;          &quot;builder&quot;: &quot;@angular-devkit/build-angular:karma&quot;,&#10;          &quot;options&quot;: {&#10;            &quot;polyfills&quot;: [&#10;              &quot;zone.js&quot;,&#10;              &quot;zone.js/testing&quot;&#10;            ],&#10;            &quot;tsConfig&quot;: &quot;tsconfig.spec.json&quot;,&#10;            &quot;inlineStyleLanguage&quot;: &quot;scss&quot;,&#10;            &quot;assets&quot;: [&#10;              &quot;src/favicon.ico&quot;,&#10;              &quot;src/assets&quot;&#10;            ],&#10;            &quot;styles&quot;: [&#10;              &quot;src/styles.scss&quot;&#10;            ],&#10;            &quot;scripts&quot;: []&#10;          }&#10;        }&#10;      }&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/nginx.conf" />
              <option name="originalContent" value="server {&#10;  listen 80;&#10;  server_name _;&#10;&#10;  root /usr/share/nginx/html;&#10;  index index.html;&#10;&#10;  # SPA fallback&#10;  location / {&#10;    try_files $uri $uri/ /index.html;&#10;  }&#10;&#10;  # Static assets cache (opcional)&#10;  location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg)$ {&#10;    try_files $uri =404;&#10;    expires 1h;&#10;    add_header Cache-Control &quot;public, no-transform&quot;;&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="server {&#10;  listen 80;&#10;  server_name _;&#10;&#10;  root /usr/share/nginx/html;&#10;  index index.html;&#10;&#10;  # Proxy API al backend&#10;  location /api/ {&#10;    proxy_pass http://backend:3000;&#10;    proxy_http_version 1.1;&#10;    proxy_set_header Upgrade $http_upgrade;&#10;    proxy_set_header Connection 'upgrade';&#10;    proxy_set_header Host $host;&#10;    proxy_cache_bypass $http_upgrade;&#10;  }&#10;&#10;  # SPA fallback&#10;  location / {&#10;    try_files $uri $uri/ /index.html;&#10;  }&#10;&#10;  # Static assets cache (opcional)&#10;  location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg)$ {&#10;    try_files $uri =404;&#10;    expires 1h;&#10;    add_header Cache-Control &quot;public, no-transform&quot;;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;,&#10;    &quot;test&quot;: &quot;ng test&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/common&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/core&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/router&quot;: &quot;^17.3.0&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.14.3&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular-devkit/build-angular&quot;: &quot;^17.3.17&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^17.3.17&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@tailwindcss/forms&quot;: &quot;^0.5.10&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.16&quot;,&#10;    &quot;@types/jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.21&quot;,&#10;    &quot;jasmine-core&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma&quot;: &quot;~6.4.0&quot;,&#10;    &quot;karma-chrome-launcher&quot;: &quot;~3.2.0&quot;,&#10;    &quot;karma-coverage&quot;: &quot;~2.2.0&quot;,&#10;    &quot;karma-jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma-jasmine-html-reporter&quot;: &quot;~2.1.0&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;typescript&quot;: &quot;~5.4.2&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;,&#10;    &quot;test&quot;: &quot;ng test&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/common&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/core&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@angular/router&quot;: &quot;^17.3.0&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.14.3&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular-devkit/build-angular&quot;: &quot;^17.3.17&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^17.3.17&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^17.3.0&quot;,&#10;    &quot;@tailwindcss/forms&quot;: &quot;^0.5.7&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.10&quot;,&#10;    &quot;@types/jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,&#10;    &quot;jasmine-core&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma&quot;: &quot;~6.4.0&quot;,&#10;    &quot;karma-chrome-launcher&quot;: &quot;~3.2.0&quot;,&#10;    &quot;karma-coverage&quot;: &quot;~2.2.0&quot;,&#10;    &quot;karma-jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma-jasmine-html-reporter&quot;: &quot;~2.1.0&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.47&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;typescript&quot;: &quot;~5.4.2&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/postcss.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/postcss.config.js" />
              <option name="updatedContent" value="module.exports = {&#10;  plugins: {&#10;    tailwindcss: {},&#10;    autoprefixer: {},&#10;  },&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/app.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/app.component.html" />
              <option name="originalContent" value="&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * The content below * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * Delete the template below * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * to get started with your project! * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&#10;&lt;nav&gt;&#10;  &lt;a routerLink=&quot;/algorithms&quot;&gt;Algoritmos&lt;/a&gt;&#10;  &lt;a routerLink=&quot;/progress&quot;&gt;Progreso&lt;/a&gt;&#10;  &lt;span style=&quot;float:right&quot;&gt;&#10;    &lt;ng-container *ngIf=&quot;user$ | async as user; else loggedOut&quot;&gt;&#10;      &lt;span&gt;Hola, {{ user.name }} &lt;/span&gt;&#10;      &lt;button (click)=&quot;logout()&quot;&gt;Salir&lt;/button&gt;&#10;    &lt;/ng-container&gt;&#10;    &lt;ng-template #loggedOut&gt;&#10;      &lt;a routerLink=&quot;/auth/login&quot;&gt;Entrar&lt;/a&gt;&#10;      &lt;a routerLink=&quot;/auth/register&quot;&gt;Registro&lt;/a&gt;&#10;    &lt;/ng-template&gt;&#10;  &lt;/span&gt;&#10;&lt;/nav&gt;&#10;&lt;hr /&gt;&#10;&lt;router-outlet /&gt;&#10;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * The content above * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;" />
              <option name="updatedContent" value="&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * The content below * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * Delete the template below * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * to get started with your project! * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&#10;&lt;header class=&quot;bg-white border-b&quot;&gt;&#10;  &lt;nav class=&quot;container h-14 flex items-center justify-between&quot;&gt;&#10;    &lt;a routerLink=&quot;/&quot; class=&quot;font-semibold text-gray-900&quot;&gt;Algorithm Hub&lt;/a&gt;&#10;    &lt;div class=&quot;flex items-center gap-4&quot;&gt;&#10;      &lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-700 hover:text-gray-900&quot;&gt;Algoritmos&lt;/a&gt;&#10;      &lt;a routerLink=&quot;/progress&quot; class=&quot;text-sm text-gray-700 hover:text-gray-900&quot;&gt;Progreso&lt;/a&gt;&#10;      &lt;ng-container *ngIf=&quot;user$ | async as user; else loggedOut&quot;&gt;&#10;        &lt;span class=&quot;hidden sm:inline text-sm text-gray-500&quot;&gt;Hola, {{ user.name }}&lt;/span&gt;&#10;        &lt;button class=&quot;btn btn-secondary btn-sm&quot; (click)=&quot;logout()&quot;&gt;Salir&lt;/button&gt;&#10;      &lt;/ng-container&gt;&#10;      &lt;ng-template #loggedOut&gt;&#10;        &lt;a routerLink=&quot;/auth/login&quot; class=&quot;btn btn-outline btn-sm&quot;&gt;Entrar&lt;/a&gt;&#10;        &lt;a routerLink=&quot;/auth/register&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Registro&lt;/a&gt;&#10;      &lt;/ng-template&gt;&#10;    &lt;/div&gt;&#10;  &lt;/nav&gt;&#10;&lt;/header&gt;&#10;&lt;main class=&quot;container py-6&quot;&gt;&#10;  &lt;router-outlet /&gt;&#10;&lt;/main&gt;&#10;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * The content above * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * --&gt;&#10;&lt;!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * --&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/app.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/app.component.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { RouterOutlet } from '@angular/router';&#10;&#10;@Component({&#10;  selector: 'app-root',&#10;  standalone: true,&#10;  imports: [RouterOutlet],&#10;  templateUrl: './app.component.html',&#10;  styleUrl: './app.component.scss'&#10;})&#10;export class AppComponent {&#10;  title = 'frontend';&#10;}&#10;" />
              <option name="updatedContent" value="import { Component, inject } from '@angular/core';&#10;import { RouterLink, RouterOutlet } from '@angular/router';&#10;import { CommonModule } from '@angular/common';&#10;import { AuthService } from './core/auth/auth.service';&#10;&#10;@Component({&#10;  selector: 'app-root',&#10;  standalone: true,&#10;  imports: [CommonModule, RouterOutlet, RouterLink],&#10;  templateUrl: './app.component.html',&#10;  styleUrl: './app.component.scss'&#10;})&#10;export class AppComponent {&#10;  private auth = inject(AuthService);&#10;  user$ = this.auth.user$;&#10;  logout() { this.auth.logout(); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/app.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/app.config.ts" />
              <option name="originalContent" value="import { ApplicationConfig } from '@angular/core';&#10;import { provideRouter } from '@angular/router';&#10;&#10;import { routes } from './app.routes';&#10;&#10;export const appConfig: ApplicationConfig = {&#10;  providers: [provideRouter(routes)]&#10;};&#10;" />
              <option name="updatedContent" value="import { ApplicationConfig } from '@angular/core';&#10;import { provideRouter } from '@angular/router';&#10;import { routes } from './app.routes';&#10;import { provideHttpClient, withInterceptors } from '@angular/common/http';&#10;import { authInterceptor } from './core/http/auth.interceptor';&#10;import { errorInterceptor } from './core/http/error.interceptor';&#10;&#10;export const appConfig: ApplicationConfig = {&#10;  providers: [&#10;    provideRouter(routes),&#10;    provideHttpClient(withInterceptors([authInterceptor, errorInterceptor])),&#10;  ],&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/algorithms/algorithms.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/algorithms/algorithms.service.ts" />
              <option name="updatedContent" value="import { Injectable, inject } from '@angular/core';&#10;import { HttpClient, HttpParams } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;import { environment } from '../../../environments/environment.development';&#10;&#10;export interface Algorithm {&#10;  id: number;&#10;  slug: string;&#10;  name: string;&#10;  category: 'sorting' | 'search' | 'graph' | 'dp' | 'string' | 'greedy' | 'tree';&#10;  difficulty: 'easy' | 'medium' | 'hard';&#10;  description?: string;&#10;}&#10;&#10;export interface PagedResult&lt;T&gt; {&#10;  items: T[];&#10;  page: number;&#10;  pageSize: number;&#10;  total: number;&#10;}&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class AlgorithmsService {&#10;  private http = inject(HttpClient);&#10;  private base = `${environment.apiBaseUrl}/algorithms`;&#10;&#10;  list(params: { search?: string; category?: string; page?: number; pageSize?: number } = {}): Observable&lt;PagedResult&lt;Algorithm&gt;&gt; {&#10;    let httpParams = new HttpParams();&#10;    Object.entries(params).forEach(([k, v]) =&gt; {&#10;      if (v !== undefined &amp;&amp; v !== null &amp;&amp; v !== '') httpParams = httpParams.set(k, String(v));&#10;    });&#10;    return this.http.get&lt;PagedResult&lt;Algorithm&gt;&gt;(this.base, { params: httpParams });&#10;  }&#10;&#10;  get(slug: string): Observable&lt;Algorithm&gt; {&#10;    return this.http.get&lt;Algorithm&gt;(`${this.base}/${slug}`);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/auth/auth.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/auth/auth.service.ts" />
              <option name="updatedContent" value="import { Injectable, inject } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { BehaviorSubject, Observable, tap } from 'rxjs';&#10;import { environment } from '../../../environments/environment.development';&#10;&#10;export interface User {&#10;  id: number;&#10;  email: string;&#10;  name: string;&#10;}&#10;&#10;export interface AuthResponse {&#10;  user: User;&#10;  accessToken: string;&#10;}&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class AuthService {&#10;  private http = inject(HttpClient);&#10;&#10;  private userSubject = new BehaviorSubject&lt;User | null&gt;(this.loadUser());&#10;  user$ = this.userSubject.asObservable();&#10;&#10;  get token(): string | null {&#10;    return localStorage.getItem('ah_token');&#10;  }&#10;&#10;  get isAuthenticated(): boolean {&#10;    return !!this.token;&#10;  }&#10;&#10;  private loadUser(): User | null {&#10;    const raw = localStorage.getItem('ah_user');&#10;    return raw ? (JSON.parse(raw) as User) : null;&#10;  }&#10;&#10;  private setSession(resp: AuthResponse) {&#10;    localStorage.setItem('ah_token', resp.accessToken);&#10;    localStorage.setItem('ah_user', JSON.stringify(resp.user));&#10;    this.userSubject.next(resp.user);&#10;  }&#10;&#10;  logout() {&#10;    localStorage.removeItem('ah_token');&#10;    localStorage.removeItem('ah_user');&#10;    this.userSubject.next(null);&#10;  }&#10;&#10;  register(payload: { email: string; password: string; name: string }): Observable&lt;AuthResponse&gt; {&#10;    return this.http&#10;      .post&lt;AuthResponse&gt;(`${environment.apiBaseUrl}/auth/register`, payload)&#10;      .pipe(tap((resp) =&gt; this.setSession(resp)));&#10;  }&#10;&#10;  login(payload: { email: string; password: string }): Observable&lt;AuthResponse&gt; {&#10;    return this.http&#10;      .post&lt;AuthResponse&gt;(`${environment.apiBaseUrl}/auth/login`, payload)&#10;      .pipe(tap((resp) =&gt; this.setSession(resp)));&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/guards/auth.guard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/guards/auth.guard.ts" />
              <option name="updatedContent" value="import { CanActivateFn, Router } from '@angular/router';&#10;import { inject } from '@angular/core';&#10;import { AuthService } from '../auth/auth.service';&#10;&#10;export const authGuard: CanActivateFn = () =&gt; {&#10;  const auth = inject(AuthService);&#10;  const router = inject(Router);&#10;  if (!auth.isAuthenticated) {&#10;    router.navigate(['/auth/login']);&#10;    return false;&#10;  }&#10;  return true;&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/http/auth.interceptor.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/http/auth.interceptor.ts" />
              <option name="updatedContent" value="import { HttpInterceptorFn } from '@angular/common/http';&#10;import { inject } from '@angular/core';&#10;import { AuthService } from '../auth/auth.service';&#10;&#10;export const authInterceptor: HttpInterceptorFn = (req, next) =&gt; {&#10;  const auth = inject(AuthService);&#10;  const token = auth.token;&#10;  if (token) {&#10;    req = req.clone({&#10;      setHeaders: {&#10;        Authorization: `Bearer ${token}`,&#10;      },&#10;    });&#10;  }&#10;  return next(req);&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/http/error.interceptor.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/http/error.interceptor.ts" />
              <option name="updatedContent" value="import { HttpErrorResponse, HttpInterceptorFn } from '@angular/common/http';&#10;&#10;export const errorInterceptor: HttpInterceptorFn = (req, next) =&gt; {&#10;  return next(req).pipe();&#10;  // Nota: Placeholder simple. Puedes añadir catchError para mapear y mostrar errores globales.&#10;  // Ejemplo:&#10;  // return next(req).pipe(&#10;  //   catchError((error: HttpErrorResponse) =&gt; {&#10;  //     console.error('HTTP error', error);&#10;  //     return throwError(() =&gt; error);&#10;  //   })&#10;  // );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/progress/progress.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/progress/progress.service.ts" />
              <option name="updatedContent" value="import { Injectable, inject } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable, map } from 'rxjs';&#10;import { environment } from '../../../environments/environment.development';&#10;&#10;export interface ProgressSummary {&#10;  learned: number;&#10;  total: number;&#10;  percent: number;&#10;}&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class ProgressService {&#10;  private http = inject(HttpClient);&#10;  private base = environment.apiBaseUrl;&#10;&#10;  getSummary(): Observable&lt;ProgressSummary&gt; {&#10;    return this.http.get&lt;ProgressSummary&gt;(`${this.base}/me/progress`);&#10;  }&#10;&#10;  getLearned(): Observable&lt;{ learned: { slug: string; name: string }[]; slugs: Set&lt;string&gt; }&gt; {&#10;    return this.http.get&lt;{ learned: any[] }&gt;(`${this.base}/me/algorithms`).pipe(&#10;      map((res) =&gt; ({ learned: res.learned, slugs: new Set(res.learned.map((a) =&gt; a.slug as string)) })),&#10;    );&#10;  }&#10;&#10;  learn(slug: string): Observable&lt;{ slug: string; learnedAt: string }&gt; {&#10;    return this.http.post&lt;{ slug: string; learnedAt: string }&gt;(`${this.base}/me/algorithms/${slug}/learn`, {});&#10;  }&#10;&#10;  unlearn(slug: string) {&#10;    return this.http.delete&lt;void&gt;(`${this.base}/me/algorithms/${slug}/learn`);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/core/theme/theme.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/core/theme/theme.service.ts" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class ThemeService {&#10;  private storageKey = 'ah_theme';&#10;&#10;  init() {&#10;    const saved = localStorage.getItem(this.storageKey) as 'light' | 'dark' | null;&#10;    const prefersDark = window.matchMedia &amp;&amp; window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;    const theme = saved || (prefersDark ? 'dark' : 'light');&#10;    this.apply(theme);&#10;  }&#10;&#10;  toggle() {&#10;    const isDark = document.documentElement.classList.contains('dark');&#10;    this.apply(isDark ? 'light' : 'dark');&#10;  }&#10;&#10;  apply(mode: 'light' | 'dark') {&#10;    const el = document.documentElement;&#10;    el.classList.toggle('dark', mode === 'dark');&#10;    localStorage.setItem(this.storageKey, mode);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/algorithm-detail.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/algorithm-detail.component.ts" />
              <option name="originalContent" value="import { Component, OnInit, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { ActivatedRoute, RouterLink } from '@angular/router';&#10;import { AlgorithmsService, Algorithm } from '../../core/algorithms/algorithms.service';&#10;import { ProgressService } from '../../core/progress/progress.service';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-algorithm-detail',&#10;  imports: [CommonModule, RouterLink],&#10;  template: `&#10;    &lt;a routerLink=&quot;/algorithms&quot;&gt;← Volver&lt;/a&gt;&#10;    &lt;div *ngIf=&quot;loading&quot;&gt;Cargando...&lt;/div&gt;&#10;    &lt;div *ngIf=&quot;algo&quot;&gt;&#10;      &lt;h2&gt;{{ algo.name }}&lt;/h2&gt;&#10;      &lt;p&gt;&lt;strong&gt;Slug:&lt;/strong&gt; {{ algo.slug }}&lt;/p&gt;&#10;      &lt;p&gt;&lt;strong&gt;Categoría:&lt;/strong&gt; {{ algo.category }} · &lt;strong&gt;Dificultad:&lt;/strong&gt; {{ algo.difficulty }}&lt;/p&gt;&#10;      &lt;p&gt;{{ algo.description }}&lt;/p&gt;&#10;      &lt;button *ngIf=&quot;auth.isAuthenticated&quot; (click)=&quot;toggle()&quot; [disabled]=&quot;toggling&quot;&gt;&#10;        {{ learned ? 'Desmarcar' : 'Marcar como aprendido' }}&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class AlgorithmDetailComponent implements OnInit {&#10;  private route = inject(ActivatedRoute);&#10;  private algos = inject(AlgorithmsService);&#10;  protected progress = inject(ProgressService);&#10;  protected auth = inject(AuthService);&#10;&#10;  algo: Algorithm | null = null;&#10;  learned = false;&#10;  toggling = false;&#10;  loading = true;&#10;&#10;  ngOnInit() {&#10;    const slug = this.route.snapshot.paramMap.get('slug')!;&#10;    this.algos.get(slug).subscribe({&#10;      next: (a) =&gt; { this.algo = a; this.loading = false; },&#10;      error: () =&gt; { this.loading = false; },&#10;    });&#10;    if (this.auth.isAuthenticated) {&#10;      this.progress.getLearned().subscribe((res) =&gt; {&#10;        this.learned = res.slugs.has(slug);&#10;      });&#10;    }&#10;  }&#10;&#10;  toggle() {&#10;    if (!this.algo) return;&#10;    this.toggling = true;&#10;    const slug = this.algo.slug;&#10;    const obs = this.learned ? this.progress.unlearn(slug) : this.progress.learn(slug);&#10;    obs.subscribe({&#10;      next: () =&gt; { this.learned = !this.learned; this.toggling = false; },&#10;      error: () =&gt; { this.toggling = false; },&#10;    });&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Component, OnInit, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { ActivatedRoute, RouterLink } from '@angular/router';&#10;import { AlgorithmsService, Algorithm } from '../../core/algorithms/algorithms.service';&#10;import { ProgressService } from '../../core/progress/progress.service';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;import { map } from 'rxjs/operators';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-algorithm-detail',&#10;  imports: [CommonModule, RouterLink],&#10;  template: `&#10;    &lt;a routerLink=&quot;/algorithms&quot;&gt;← Volver&lt;/a&gt;&#10;    &lt;div *ngIf=&quot;loading&quot;&gt;Cargando...&lt;/div&gt;&#10;    &lt;div *ngIf=&quot;algo&quot;&gt;&#10;      &lt;h2&gt;{{ algo.name }}&lt;/h2&gt;&#10;      &lt;p&gt;&lt;strong&gt;Slug:&lt;/strong&gt; {{ algo.slug }}&lt;/p&gt;&#10;      &lt;p&gt;&lt;strong&gt;Categoría:&lt;/strong&gt; {{ algo.category }} · &lt;strong&gt;Dificultad:&lt;/strong&gt; {{ algo.difficulty }}&lt;/p&gt;&#10;      &lt;p&gt;{{ algo.description }}&lt;/p&gt;&#10;      &lt;button *ngIf=&quot;auth.isAuthenticated&quot; (click)=&quot;toggle()&quot; [disabled]=&quot;toggling&quot;&gt;&#10;        {{ learned ? 'Desmarcar' : 'Marcar como aprendido' }}&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class AlgorithmDetailComponent implements OnInit {&#10;  private route = inject(ActivatedRoute);&#10;  private algos = inject(AlgorithmsService);&#10;  protected progress = inject(ProgressService);&#10;  protected auth = inject(AuthService);&#10;&#10;  algo: Algorithm | null = null;&#10;  learned = false;&#10;  toggling = false;&#10;  loading = true;&#10;&#10;  ngOnInit() {&#10;    const slug = this.route.snapshot.paramMap.get('slug')!;&#10;    this.algos.get(slug).subscribe({&#10;      next: (a) =&gt; { this.algo = a; this.loading = false; },&#10;      error: () =&gt; { this.loading = false; },&#10;    });&#10;    if (this.auth.isAuthenticated) {&#10;      this.progress.getLearned().subscribe((res) =&gt; {&#10;        this.learned = res.slugs.has(slug);&#10;      });&#10;    }&#10;  }&#10;&#10;  toggle() {&#10;    if (!this.algo) return;&#10;    this.toggling = true;&#10;    const slug = this.algo.slug;&#10;    const obs$ = this.learned&#10;      ? this.progress.unlearn(slug)&#10;      : this.progress.learn(slug).pipe(map(() =&gt; void 0));&#10;    obs$.subscribe({&#10;      next: () =&gt; { this.learned = !this.learned; this.toggling = false; },&#10;      error: () =&gt; { this.toggling = false; },&#10;    });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/algorithms-list.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/algorithms-list.component.ts" />
              <option name="originalContent" value="import { Component, OnInit, inject, signal } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { AlgorithmsService, Algorithm, PagedResult } from '../../core/algorithms/algorithms.service';&#10;import { FormsModule } from '@angular/forms';&#10;import { RouterLink } from '@angular/router';&#10;import { ProgressService } from '../../core/progress/progress.service';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-algorithms-list',&#10;  imports: [CommonModule, FormsModule, RouterLink],&#10;  template: `&#10;    &lt;h2&gt;Algoritmos&lt;/h2&gt;&#10;    &lt;div class=&quot;filters&quot;&gt;&#10;      &lt;input type=&quot;text&quot; [(ngModel)]=&quot;search&quot; placeholder=&quot;Buscar...&quot; (ngModelChange)=&quot;refresh()&quot; /&gt;&#10;      &lt;select [(ngModel)]=&quot;category&quot; (change)=&quot;refresh()&quot;&gt;&#10;        &lt;option value=&quot;&quot;&gt;Todas las categorías&lt;/option&gt;&#10;        &lt;option value=&quot;sorting&quot;&gt;Sorting&lt;/option&gt;&#10;        &lt;option value=&quot;search&quot;&gt;Search&lt;/option&gt;&#10;        &lt;option value=&quot;graph&quot;&gt;Graph&lt;/option&gt;&#10;        &lt;option value=&quot;dp&quot;&gt;DP&lt;/option&gt;&#10;        &lt;option value=&quot;string&quot;&gt;String&lt;/option&gt;&#10;        &lt;option value=&quot;greedy&quot;&gt;Greedy&lt;/option&gt;&#10;        &lt;option value=&quot;tree&quot;&gt;Tree&lt;/option&gt;&#10;      &lt;/select&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div *ngIf=&quot;loading&quot;&gt;Cargando...&lt;/div&gt;&#10;&#10;    &lt;ul&gt;&#10;      &lt;li *ngFor=&quot;let a of items&quot;&gt;&#10;        &lt;a [routerLink]=&quot;['/algorithms', a.slug]&quot;&gt;{{ a.name }}&lt;/a&gt;&#10;        &lt;small&gt;({{ a.category }} · {{ a.difficulty }})&lt;/small&gt;&#10;        &lt;button *ngIf=&quot;auth.isAuthenticated&quot; (click)=&quot;toggle(a)&quot; [disabled]=&quot;toggling === a.slug&quot;&gt;&#10;          {{ isLearned(a.slug) ? 'Desmarcar' : 'Aprendido' }}&#10;        &lt;/button&gt;&#10;      &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&#10;    &lt;div class=&quot;pager&quot; *ngIf=&quot;total &gt; pageSize&quot;&gt;&#10;      &lt;button (click)=&quot;prev()&quot; [disabled]=&quot;page===1&quot;&gt;Anterior&lt;/button&gt;&#10;      &lt;span&gt;Página {{ page }} / {{ totalPages }}&lt;/span&gt;&#10;      &lt;button (click)=&quot;next()&quot; [disabled]=&quot;page===totalPages&quot;&gt;Siguiente&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;  styles: [&#10;    `&#10;      .filters { display: flex; gap: .5rem; margin: .5rem 0; }&#10;      ul { list-style: none; padding: 0; }&#10;      li { margin: .25rem 0; }&#10;      .pager { display:flex; gap:.5rem; align-items:center; }&#10;    `,&#10;  ],&#10;})&#10;export class AlgorithmsListComponent implements OnInit {&#10;  private algos = inject(AlgorithmsService);&#10;  protected progress = inject(ProgressService);&#10;  protected auth = inject(AuthService);&#10;&#10;  items: Algorithm[] = [];&#10;  total = 0;&#10;  page = 1;&#10;  pageSize = 10;&#10;  search = '';&#10;  category = '';&#10;  loading = false;&#10;  toggling: string | null = null;&#10;  learnedSlugs = new Set&lt;string&gt;();&#10;&#10;  get totalPages() { return Math.max(1, Math.ceil(this.total / this.pageSize)); }&#10;&#10;  ngOnInit() {&#10;    if (this.auth.isAuthenticated) {&#10;      this.progress.getLearned().subscribe((res) =&gt; (this.learnedSlugs = res.slugs));&#10;    }&#10;    this.refresh();&#10;  }&#10;&#10;  isLearned(slug: string) { return this.learnedSlugs.has(slug); }&#10;&#10;  refresh() {&#10;    this.loading = true;&#10;    this.algos.list({ search: this.search, category: this.category || undefined, page: this.page, pageSize: this.pageSize }).subscribe({&#10;      next: (res: PagedResult&lt;Algorithm&gt;) =&gt; {&#10;        this.items = res.items; this.total = res.total; this.page = res.page; this.pageSize = res.pageSize; this.loading = false;&#10;      },&#10;      error: () =&gt; { this.loading = false; },&#10;    });&#10;  }&#10;&#10;  prev() { if (this.page &gt; 1) { this.page--; this.refresh(); } }&#10;  next() { if (this.page &lt; this.totalPages) { this.page++; this.refresh(); } }&#10;&#10;  toggle(a: Algorithm) {&#10;    if (!this.auth.isAuthenticated) return;&#10;    this.toggling = a.slug;&#10;    const obs = this.isLearned(a.slug) ? this.progress.unlearn(a.slug) : this.progress.learn(a.slug);&#10;    obs.subscribe({&#10;      next: () =&gt; {&#10;        if (this.isLearned(a.slug)) this.learnedSlugs.delete(a.slug); else this.learnedSlugs.add(a.slug);&#10;        this.toggling = null;&#10;      },&#10;      error: () =&gt; { this.toggling = null; },&#10;    });&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Component, OnInit, inject, signal } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { AlgorithmsService, Algorithm, PagedResult } from '../../core/algorithms/algorithms.service';&#10;import { FormsModule } from '@angular/forms';&#10;import { RouterLink } from '@angular/router';&#10;import { ProgressService } from '../../core/progress/progress.service';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;import { map } from 'rxjs/operators';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-algorithms-list',&#10;  imports: [CommonModule, FormsModule, RouterLink],&#10;  template: `&#10;    &lt;h2&gt;Algoritmos&lt;/h2&gt;&#10;    &lt;div class=&quot;filters&quot;&gt;&#10;      &lt;input type=&quot;text&quot; [(ngModel)]=&quot;search&quot; placeholder=&quot;Buscar...&quot; (ngModelChange)=&quot;refresh()&quot; /&gt;&#10;      &lt;select [(ngModel)]=&quot;category&quot; (change)=&quot;refresh()&quot;&gt;&#10;        &lt;option value=&quot;&quot;&gt;Todas las categorías&lt;/option&gt;&#10;        &lt;option value=&quot;sorting&quot;&gt;Sorting&lt;/option&gt;&#10;        &lt;option value=&quot;search&quot;&gt;Search&lt;/option&gt;&#10;        &lt;option value=&quot;graph&quot;&gt;Graph&lt;/option&gt;&#10;        &lt;option value=&quot;dp&quot;&gt;DP&lt;/option&gt;&#10;        &lt;option value=&quot;string&quot;&gt;String&lt;/option&gt;&#10;        &lt;option value=&quot;greedy&quot;&gt;Greedy&lt;/option&gt;&#10;        &lt;option value=&quot;tree&quot;&gt;Tree&lt;/option&gt;&#10;      &lt;/select&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div *ngIf=&quot;loading&quot;&gt;Cargando...&lt;/div&gt;&#10;&#10;    &lt;ul&gt;&#10;      &lt;li *ngFor=&quot;let a of items&quot;&gt;&#10;        &lt;a [routerLink]=&quot;['/algorithms', a.slug]&quot;&gt;{{ a.name }}&lt;/a&gt;&#10;        &lt;small&gt;({{ a.category }} · {{ a.difficulty }})&lt;/small&gt;&#10;        &lt;button *ngIf=&quot;auth.isAuthenticated&quot; (click)=&quot;toggle(a)&quot; [disabled]=&quot;toggling === a.slug&quot;&gt;&#10;          {{ isLearned(a.slug) ? 'Desmarcar' : 'Aprendido' }}&#10;        &lt;/button&gt;&#10;      &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&#10;    &lt;div class=&quot;pager&quot; *ngIf=&quot;total &gt; pageSize&quot;&gt;&#10;      &lt;button (click)=&quot;prev()&quot; [disabled]=&quot;page===1&quot;&gt;Anterior&lt;/button&gt;&#10;      &lt;span&gt;Página {{ page }} / {{ totalPages }}&lt;/span&gt;&#10;      &lt;button (click)=&quot;next()&quot; [disabled]=&quot;page===totalPages&quot;&gt;Siguiente&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;  styles: [&#10;    `&#10;      .filters { display: flex; gap: .5rem; margin: .5rem 0; }&#10;      ul { list-style: none; padding: 0; }&#10;      li { margin: .25rem 0; }&#10;      .pager { display:flex; gap:.5rem; align-items:center; }&#10;    `,&#10;  ],&#10;})&#10;export class AlgorithmsListComponent implements OnInit {&#10;  private algos = inject(AlgorithmsService);&#10;  protected progress = inject(ProgressService);&#10;  protected auth = inject(AuthService);&#10;&#10;  items: Algorithm[] = [];&#10;  total = 0;&#10;  page = 1;&#10;  pageSize = 10;&#10;  search = '';&#10;  category = '';&#10;  loading = false;&#10;  toggling: string | null = null;&#10;  learnedSlugs = new Set&lt;string&gt;();&#10;&#10;  get totalPages() { return Math.max(1, Math.ceil(this.total / this.pageSize)); }&#10;&#10;  ngOnInit() {&#10;    if (this.auth.isAuthenticated) {&#10;      this.progress.getLearned().subscribe((res) =&gt; (this.learnedSlugs = res.slugs));&#10;    }&#10;    this.refresh();&#10;  }&#10;&#10;  isLearned(slug: string) { return this.learnedSlugs.has(slug); }&#10;&#10;  refresh() {&#10;    this.loading = true;&#10;    this.algos.list({ search: this.search, category: this.category || undefined, page: this.page, pageSize: this.pageSize }).subscribe({&#10;      next: (res: PagedResult&lt;Algorithm&gt;) =&gt; {&#10;        this.items = res.items; this.total = res.total; this.page = res.page; this.pageSize = res.pageSize; this.loading = false;&#10;      },&#10;      error: () =&gt; { this.loading = false; },&#10;    });&#10;  }&#10;&#10;  prev() { if (this.page &gt; 1) { this.page--; this.refresh(); } }&#10;  next() { if (this.page &lt; this.totalPages) { this.page++; this.refresh(); } }&#10;&#10;  toggle(a: Algorithm) {&#10;    if (!this.auth.isAuthenticated) return;&#10;    this.toggling = a.slug;&#10;    const obs$ = this.isLearned(a.slug)&#10;      ? this.progress.unlearn(a.slug)&#10;      : this.progress.learn(a.slug).pipe(map(() =&gt; void 0));&#10;    obs$.subscribe({&#10;      next: () =&gt; {&#10;        if (this.isLearned(a.slug)) this.learnedSlugs.delete(a.slug); else this.learnedSlugs.add(a.slug);&#10;        this.toggling = null;&#10;      },&#10;      error: () =&gt; { this.toggling = null; },&#10;    });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bellman-ford.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bellman-ford.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Bellman-Ford&quot; subtitle=&quot;graph · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Bellman-Ford.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bellman-ford.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bellman-ford.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-bellman-ford',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './bellman-ford.component.html',&#10;})&#10;export class BellmanFordComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-search.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-search.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Binary Search&quot; subtitle=&quot;search · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Binary Search.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-search.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-search.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-binary-search',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './binary-search.component.html',&#10;})&#10;export class BinarySearchComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-tree-traversals.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/binary-tree-traversals.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-binary-tree-traversals',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './binary-tree-traversals.component.html',&#10;})&#10;export class BinaryTreeTraversalsComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/breadth-first-search.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/breadth-first-search.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Breadth-First Search (BFS)&quot; subtitle=&quot;graph · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para BFS.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/breadth-first-search.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/breadth-first-search.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-breadth-first-search',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './breadth-first-search.component.html',&#10;})&#10;export class BreadthFirstSearchComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bubble-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bubble-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Bubble Sort&quot; subtitle=&quot;sorting · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Bubble Sort. Añade visualizaciones, pasos y ejercicios adaptados.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bubble-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/bubble-sort.component.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-bubble-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  template: `&#10;    &lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;    &lt;ui-card title=&quot;Bubble Sort&quot; subtitle=&quot;sorting · easy&quot;&gt;&#10;      &lt;p&gt;Página personalizada para Bubble Sort. Aquí puedes añadir visualizaciones, tips y ejercicios.&lt;/p&gt;&#10;    &lt;/ui-card&gt;&#10;  `,&#10;})&#10;export class BubbleSortComponent {}&#10;&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-bubble-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './bubble-sort.component.html',&#10;})&#10;export class BubbleSortComponent {}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/depth-first-search.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/depth-first-search.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Depth-First Search (DFS)&quot; subtitle=&quot;graph · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para DFS.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/depth-first-search.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/depth-first-search.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-depth-first-search',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './depth-first-search.component.html',&#10;})&#10;export class DepthFirstSearchComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/dijkstra.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/dijkstra.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Dijkstra&quot; subtitle=&quot;graph · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Dijkstra.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/dijkstra.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/dijkstra.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-dijkstra',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './dijkstra.component.html',&#10;})&#10;export class DijkstraComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/floyd-warshall.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/floyd-warshall.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Floyd-Warshall&quot; subtitle=&quot;graph · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Floyd-Warshall.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/floyd-warshall.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/floyd-warshall.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-floyd-warshall',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './floyd-warshall.component.html',&#10;})&#10;export class FloydWarshallComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/insertion-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/insertion-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Insertion Sort&quot; subtitle=&quot;sorting · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Insertion Sort. Visualizaciones y pasos guiados.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/insertion-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/insertion-sort.component.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-insertion-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  template: `&#10;    &lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;    &lt;ui-card title=&quot;Insertion Sort&quot; subtitle=&quot;sorting · easy&quot;&gt;&#10;      &lt;p&gt;Página personalizada para Insertion Sort. Añade visualizaciones, pasos y ejercicios guiados.&lt;/p&gt;&#10;    &lt;/ui-card&gt;&#10;  `,&#10;})&#10;export class InsertionSortComponent {}&#10;&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-insertion-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './insertion-sort.component.html',&#10;})&#10;export class InsertionSortComponent {}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kmp.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kmp.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Knuth–Morris–Pratt (KMP)&quot; subtitle=&quot;string · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para KMP.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kmp.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kmp.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-kmp',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './kmp.component.html',&#10;})&#10;export class KmpComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.html" />
              <option name="originalContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors group&quot;&gt;&#10;  &lt;span class=&quot;group-hover:-translate-x-0.5 transition-transform&quot;&gt;←&lt;/span&gt;&#10;  Volver&#10;&lt;/a&gt;&#10;&#10;&lt;ui-card title=&quot;0/1 Knapsack&quot; subtitle=&quot;dp · medium&quot;&gt;&#10;  &lt;div class=&quot;ah-knap space-y-6&quot;&gt;&#10;    &lt;!-- Intro --&gt;&#10;    &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;      &lt;p class=&quot;text-gray-600&quot;&gt;Explora paso a paso cómo la programación dinámica resuelve el problema de la mochila 0/1. Ajusta la capacidad, edita los ítems y mira cómo se llena la tabla.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Controles principales --&gt;&#10;    &lt;div class=&quot;flex flex-col lg:flex-row gap-4 lg:items-end&quot;&gt;&#10;      &lt;div class=&quot;flex-1 bg-white/70 dark:bg-slate-800/70 backdrop-blur rounded-xl p-4 shadow-sm border border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;label class=&quot;flex items-center justify-between mb-2 text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;&#10;          &lt;span&gt;Capacidad de la mochila&lt;/span&gt;&#10;          &lt;span class=&quot;inline-flex items-center gap-1 text-slate-900 dark:text-white&quot;&gt;&lt;span class=&quot;font-semibold&quot;&gt;{{ capacity }}&lt;/span&gt;/&lt;span class=&quot;text-slate-500&quot;&gt;{{ maxCapacity }}&lt;/span&gt;&lt;/span&gt;&#10;        &lt;/label&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;input type=&quot;range&quot; class=&quot;w-full accent-cyan-500&quot; min=&quot;0&quot; [max]=&quot;maxCapacity&quot; step=&quot;1&quot; [(ngModel)]=&quot;capacity&quot; (ngModelChange)=&quot;onCapacityChange()&quot; /&gt;&#10;          &lt;input type=&quot;number&quot; class=&quot;w-20 ah-input&quot; min=&quot;0&quot; [max]=&quot;maxCapacity&quot; [(ngModel)]=&quot;capacity&quot; (ngModelChange)=&quot;onCapacityChange()&quot; /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;flex-1 bg-white/70 dark:bg-slate-800/70 backdrop-blur rounded-xl p-4 shadow-sm border border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;label class=&quot;flex items-center justify-between mb-2 text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;&#10;          &lt;span&gt;Velocidad&lt;/span&gt;&#10;          &lt;span class=&quot;text-slate-500&quot;&gt;{{ speed }} ms&lt;/span&gt;&#10;        &lt;/label&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;input type=&quot;range&quot; class=&quot;w-full accent-fuchsia-500&quot; min=&quot;200&quot; max=&quot;1500&quot; step=&quot;50&quot; [(ngModel)]=&quot;speed&quot; (ngModelChange)=&quot;setSpeed($event)&quot; /&gt;&#10;          &lt;select class=&quot;ah-input w-28&quot; [(ngModel)]=&quot;speed&quot; (ngModelChange)=&quot;setSpeed($event)&quot;&gt;&#10;            &lt;option [ngValue]=&quot;300&quot;&gt;Rápido&lt;/option&gt;&#10;            &lt;option [ngValue]=&quot;700&quot;&gt;Normal&lt;/option&gt;&#10;            &lt;option [ngValue]=&quot;1200&quot;&gt;Lento&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;flex-1 flex flex-wrap gap-2&quot;&gt;&#10;        &lt;button (click)=&quot;toggleAutoplay()&quot; class=&quot;ah-btn ah-btn-primary&quot; [class!]=&quot;autoplay ? 'animate-pulse' : ''&quot;&gt;&#10;          &lt;span *ngIf=&quot;!autoplay&quot;&gt;▶ Reproducir&lt;/span&gt;&#10;          &lt;span *ngIf=&quot;autoplay&quot;&gt;⏸ Pausar&lt;/span&gt;&#10;        &lt;/button&gt;&#10;        &lt;button (click)=&quot;stepBackward()&quot; class=&quot;ah-btn&quot;&gt;⟲ Atrás&lt;/button&gt;&#10;        &lt;button (click)=&quot;stepForward()&quot; class=&quot;ah-btn&quot;&gt;⟶ Paso&lt;/button&gt;&#10;        &lt;button (click)=&quot;resetTables()&quot; class=&quot;ah-btn ah-btn-soft&quot;&gt;⟲ Reiniciar&lt;/button&gt;&#10;        &lt;button (click)=&quot;randomize()&quot; class=&quot;ah-btn ah-btn-soft&quot;&gt; Aleatorio&lt;/button&gt;&#10;        &lt;button (click)=&quot;addItem()&quot; class=&quot;ah-btn ah-btn-outline&quot;&gt;＋ Añadir ítem&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Items --&gt;&#10;    &lt;div class=&quot;grid md:grid-cols-2 xl:grid-cols-3 gap-4&quot;&gt;&#10;      &lt;div *ngFor=&quot;let it of items; let idx = index; trackBy: trackByIndex&quot; class=&quot;soft-card group&quot;&gt;&#10;        &lt;div class=&quot;flex items-start gap-3&quot;&gt;&#10;          &lt;span class=&quot;mt-1 h-3 w-3 rounded-full ring-2 ring-offset-2 ring-offset-white dark:ring-offset-slate-900&quot; [style.background]=&quot;it.color&quot; [style.boxShadow]=&quot;'0 0 0 3px ' + it.color + '22'&quot;&gt;&lt;/span&gt;&#10;          &lt;div class=&quot;flex-1&quot;&gt;&#10;            &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;h3 class=&quot;font-semibold text-slate-800 dark:text-slate-100&quot;&gt;{{ it.name }}&lt;/h3&gt;&#10;              &lt;button class=&quot;text-slate-400 hover:text-rose-500 transition-colors&quot; (click)=&quot;removeItem(idx)&quot; aria-label=&quot;Eliminar&quot;&gt;✖&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mt-3 grid grid-cols-2 gap-3 text-sm&quot;&gt;&#10;              &lt;label class=&quot;flex flex-col gap-1&quot;&gt;&#10;                &lt;span class=&quot;text-slate-500&quot;&gt;Peso&lt;/span&gt;&#10;                &lt;input type=&quot;number&quot; class=&quot;ah-input&quot; min=&quot;1&quot; [(ngModel)]=&quot;it.weight&quot; (ngModelChange)=&quot;resetTables()&quot; /&gt;&#10;              &lt;/label&gt;&#10;              &lt;label class=&quot;flex flex-col gap-1&quot;&gt;&#10;                &lt;span class=&quot;text-slate-500&quot;&gt;Valor&lt;/span&gt;&#10;                &lt;input type=&quot;number&quot; class=&quot;ah-input&quot; min=&quot;1&quot; [(ngModel)]=&quot;it.value&quot; (ngModelChange)=&quot;resetTables()&quot; /&gt;&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Visualización DP --&gt;&#10;    &lt;div class=&quot;dp-wrap&quot;&gt;&#10;      &lt;div class=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;        &lt;h4 class=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Tabla de DP (filas: ítems, columnas: capacidad)&lt;/h4&gt;&#10;        &lt;span class=&quot;text-xs text-slate-500&quot;&gt;Celda actual: (i={{ i }}, w={{ w }})&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;overflow-auto rounded-xl border border-slate-200 dark:border-slate-700 shadow-sm&quot;&gt;&#10;        &lt;table class=&quot;dp-table min-w-max&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr&gt;&#10;              &lt;th class=&quot;sticky left-0 bg-slate-50/80 dark:bg-slate-800/80 backdrop-blur z-10&quot;&gt;i/w&lt;/th&gt;&#10;              &lt;th *ngFor=&quot;let col of [].constructor(capacity + 1); let cw = index&quot; class=&quot;text-center&quot;&gt;{{ cw }}&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            &lt;tr *ngFor=&quot;let r of [].constructor(items.length + 1); let ri = index&quot;&gt;&#10;              &lt;th class=&quot;sticky left-0 bg-slate-50/80 dark:bg-slate-800/80 backdrop-blur z-10 text-left&quot;&gt;&#10;                &lt;span *ngIf=&quot;ri === 0&quot; class=&quot;text-slate-400&quot;&gt;0&lt;/span&gt;&#10;                &lt;span *ngIf=&quot;ri &gt; 0&quot;&gt;{{ items[ri - 1]?.name }} &lt;span class=&quot;text-xs text-slate-400&quot;&gt;(p={{ items[ri-1]?.weight }}, v={{ items[ri-1]?.value }})&lt;/span&gt;&lt;/span&gt;&#10;              &lt;/th&gt;&#10;              &lt;td *ngFor=&quot;let c of [].constructor(capacity + 1); let ci = index&quot;&#10;                  [class.cell-current]=&quot;ri === i &amp;&amp; ci === w &amp;&amp; !finished&quot;&#10;                  [class.cell-filled]=&quot;finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w)&quot;&#10;                  [class.cell-empty]=&quot;!(finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w))&quot;&#10;                  class=&quot;cell&quot;&gt;&#10;                &lt;ng-container *ngIf=&quot;finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w); else waiting&quot;&gt;&#10;                  {{ dp[ri][ci] }}&#10;                &lt;/ng-container&gt;&#10;                &lt;ng-template #waiting&gt;&#10;                  &lt;span class=&quot;text-slate-300&quot;&gt;—&lt;/span&gt;&#10;                &lt;/ng-template&gt;&#10;              &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Fórmula/explicación --&gt;&#10;      &lt;div class=&quot;mt-3 text-sm text-slate-600 dark:text-slate-300 flex flex-wrap items-center gap-3&quot;&gt;&#10;        &lt;div class=&quot;px-3 py-1 rounded-full bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;          &lt;span class=&quot;font-mono&quot;&gt;dp[i][w] = max(dp[i-1][w], value[i] + dp[i-1][w - weight[i]])&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div *ngIf=&quot;i&gt;0&quot; class=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;span class=&quot;inline-flex items-center gap-1 px-2 py-1 rounded bg-white/70 dark:bg-slate-800/70 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;span class=&quot;text-slate-500&quot;&gt;ítem&lt;/span&gt;&#10;            &lt;span class=&quot;font-semibold&quot; [style.color]=&quot;items[i-1]?.color&quot;&gt;{{ items[i-1]?.name }}&lt;/span&gt;&#10;            &lt;span class=&quot;text-slate-500&quot;&gt;p={{ items[i-1]?.weight }}, v={{ items[i-1]?.value }}&lt;/span&gt;&#10;          &lt;/span&gt;&#10;          &lt;span *ngIf=&quot;items[i-1]?.weight &lt;= w&quot; class=&quot;text-emerald-600&quot;&gt;incluible&lt;/span&gt;&#10;          &lt;span *ngIf=&quot;items[i-1]?.weight &gt; w&quot; class=&quot;text-rose-600&quot;&gt;no cabe&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Resultado --&gt;&#10;    &lt;div *ngIf=&quot;finished&quot; class=&quot;mt-2 p-4 rounded-xl border border-emerald-300 dark:border-emerald-700 bg-emerald-50/70 dark:bg-emerald-900/20 flex items-start gap-4&quot;&gt;&#10;      &lt;div class=&quot;text-2xl&quot;&gt;✅&lt;/div&gt;&#10;      &lt;div class=&quot;flex-1&quot;&gt;&#10;        &lt;div class=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;Solución óptima encontrada&lt;/div&gt;&#10;        &lt;div class=&quot;mt-1 text-sm text-emerald-700 dark:text-emerald-200&quot;&gt;Valor máximo: &lt;span class=&quot;font-bold&quot;&gt;{{ dp[items.length][capacity] }}&lt;/span&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;mt-2 flex flex-wrap gap-2&quot;&gt;&#10;          &lt;span *ngFor=&quot;let idx of solution&quot; class=&quot;inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm&quot;&gt;&#10;            &lt;span class=&quot;h-2 w-2 rounded-full&quot; [style.background]=&quot;items[idx].color&quot;&gt;&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm&quot;&gt;{{ items[idx].name }}&lt;/span&gt;&#10;            &lt;span class=&quot;text-xs text-slate-500&quot;&gt;(p={{ items[idx].weight }}, v={{ items[idx].value }})&lt;/span&gt;&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors group&quot;&gt;&#10;  &lt;span class=&quot;group-hover:-translate-x-0.5 transition-transform&quot;&gt;←&lt;/span&gt;&#10;  Volver&#10;&lt;/a&gt;&#10;&#10;&lt;ui-card title=&quot;0/1 Knapsack&quot; subtitle=&quot;dp · medium&quot;&gt;&#10;  &lt;div class=&quot;ah-knap space-y-6&quot;&gt;&#10;    &lt;!-- Intro --&gt;&#10;    &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;      &lt;p class=&quot;text-gray-600&quot;&gt;Explora paso a paso cómo la programación dinámica resuelve el problema de la mochila 0/1. Ajusta la capacidad, edita los ítems y mira cómo se llena la tabla.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Controles principales --&gt;&#10;    &lt;div class=&quot;flex flex-col lg:flex-row gap-4 lg:items-end&quot;&gt;&#10;      &lt;div class=&quot;flex-1 bg-white/70 dark:bg-slate-800/70 backdrop-blur rounded-xl p-4 shadow-sm border border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;label class=&quot;flex items-center justify-between mb-2 text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;&#10;          &lt;span&gt;Capacidad de la mochila&lt;/span&gt;&#10;          &lt;span class=&quot;inline-flex items-center gap-1 text-slate-900 dark:text-white&quot;&gt;&lt;span class=&quot;font-semibold&quot;&gt;{{ capacity }}&lt;/span&gt;/&lt;span class=&quot;text-slate-500&quot;&gt;{{ maxCapacity }}&lt;/span&gt;&lt;/span&gt;&#10;        &lt;/label&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;input type=&quot;range&quot; class=&quot;w-full accent-cyan-500&quot; min=&quot;0&quot; [max]=&quot;maxCapacity&quot; step=&quot;1&quot; [(ngModel)]=&quot;capacity&quot; (ngModelChange)=&quot;onCapacityChange()&quot; /&gt;&#10;          &lt;input type=&quot;number&quot; class=&quot;w-20 ah-input&quot; min=&quot;0&quot; [max]=&quot;maxCapacity&quot; [(ngModel)]=&quot;capacity&quot; (ngModelChange)=&quot;onCapacityChange()&quot; /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;flex-1 bg-white/70 dark:bg-slate-800/70 backdrop-blur rounded-xl p-4 shadow-sm border border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;label class=&quot;flex items-center justify-between mb-2 text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;&#10;          &lt;span&gt;Velocidad&lt;/span&gt;&#10;          &lt;span class=&quot;text-slate-500&quot;&gt;{{ speed }} ms&lt;/span&gt;&#10;        &lt;/label&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;input type=&quot;range&quot; class=&quot;w-full accent-fuchsia-500&quot; min=&quot;200&quot; max=&quot;1500&quot; step=&quot;50&quot; [(ngModel)]=&quot;speed&quot; (ngModelChange)=&quot;setSpeed($event)&quot; /&gt;&#10;          &lt;select class=&quot;ah-input w-28&quot; [(ngModel)]=&quot;speed&quot; (ngModelChange)=&quot;setSpeed($event)&quot;&gt;&#10;            &lt;option [ngValue]=&quot;300&quot;&gt;Rápido&lt;/option&gt;&#10;            &lt;option [ngValue]=&quot;700&quot;&gt;Normal&lt;/option&gt;&#10;            &lt;option [ngValue]=&quot;1200&quot;&gt;Lento&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;flex-1 flex flex-wrap gap-2&quot;&gt;&#10;        &lt;button (click)=&quot;toggleAutoplay()&quot; class=&quot;ah-btn ah-btn-primary&quot; [ngClass]=&quot;{ 'animate-pulse': autoplay }&quot;&gt;&#10;          &lt;span *ngIf=&quot;!autoplay&quot;&gt;▶ Reproducir&lt;/span&gt;&#10;          &lt;span *ngIf=&quot;autoplay&quot;&gt;⏸ Pausar&lt;/span&gt;&#10;        &lt;/button&gt;&#10;        &lt;button (click)=&quot;stepBackward()&quot; class=&quot;ah-btn&quot;&gt;⟲ Atrás&lt;/button&gt;&#10;        &lt;button (click)=&quot;stepForward()&quot; class=&quot;ah-btn&quot;&gt;⟶ Paso&lt;/button&gt;&#10;        &lt;button (click)=&quot;resetTables()&quot; class=&quot;ah-btn ah-btn-soft&quot;&gt;⟲ Reiniciar&lt;/button&gt;&#10;        &lt;button (click)=&quot;randomize()&quot; class=&quot;ah-btn ah-btn-soft&quot;&gt; Aleatorio&lt;/button&gt;&#10;        &lt;button (click)=&quot;addItem()&quot; class=&quot;ah-btn ah-btn-outline&quot;&gt;＋ Añadir ítem&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Items --&gt;&#10;    &lt;div class=&quot;grid md:grid-cols-2 xl:grid-cols-3 gap-4&quot;&gt;&#10;      &lt;div *ngFor=&quot;let it of items; let idx = index; trackBy: trackByIndex&quot; class=&quot;soft-card group&quot;&gt;&#10;        &lt;div class=&quot;flex items-start gap-3&quot;&gt;&#10;          &lt;span class=&quot;mt-1 h-3 w-3 rounded-full ring-2 ring-offset-2 ring-offset-white dark:ring-offset-slate-900&quot; [style.background]=&quot;it.color&quot; [style.box-shadow]=&quot;'0 0 0 3px ' + it.color + '22'&quot;&gt;&lt;/span&gt;&#10;          &lt;div class=&quot;flex-1&quot;&gt;&#10;            &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;h3 class=&quot;font-semibold text-slate-800 dark:text-slate-100&quot;&gt;{{ it.name }}&lt;/h3&gt;&#10;              &lt;button class=&quot;text-slate-400 hover:text-rose-500 transition-colors&quot; (click)=&quot;removeItem(idx)&quot; aria-label=&quot;Eliminar&quot;&gt;✖&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mt-3 grid grid-cols-2 gap-3 text-sm&quot;&gt;&#10;              &lt;label class=&quot;flex flex-col gap-1&quot;&gt;&#10;                &lt;span class=&quot;text-slate-500&quot;&gt;Peso&lt;/span&gt;&#10;                &lt;input type=&quot;number&quot; class=&quot;ah-input&quot; min=&quot;1&quot; [(ngModel)]=&quot;it.weight&quot; (ngModelChange)=&quot;resetTables()&quot; /&gt;&#10;              &lt;/label&gt;&#10;              &lt;label class=&quot;flex flex-col gap-1&quot;&gt;&#10;                &lt;span class=&quot;text-slate-500&quot;&gt;Valor&lt;/span&gt;&#10;                &lt;input type=&quot;number&quot; class=&quot;ah-input&quot; min=&quot;1&quot; [(ngModel)]=&quot;it.value&quot; (ngModelChange)=&quot;resetTables()&quot; /&gt;&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Visualización DP --&gt;&#10;    &lt;div class=&quot;dp-wrap&quot;&gt;&#10;      &lt;div class=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;        &lt;h4 class=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Tabla de DP (filas: ítems, columnas: capacidad)&lt;/h4&gt;&#10;        &lt;span class=&quot;text-xs text-slate-500&quot;&gt;Celda actual: (i={{ i }}, w={{ w }})&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;overflow-auto rounded-xl border border-slate-200 dark:border-slate-700 shadow-sm&quot;&gt;&#10;        &lt;table class=&quot;dp-table min-w-max&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr&gt;&#10;              &lt;th class=&quot;sticky left-0 bg-slate-50/80 dark:bg-slate-800/80 backdrop-blur z-10&quot;&gt;i/w&lt;/th&gt;&#10;              &lt;th *ngFor=&quot;let col of [].constructor(capacity + 1); let cw = index&quot; class=&quot;text-center&quot;&gt;{{ cw }}&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            &lt;tr *ngFor=&quot;let r of [].constructor(items.length + 1); let ri = index&quot;&gt;&#10;              &lt;th class=&quot;sticky left-0 bg-slate-50/80 dark:bg-slate-800/80 backdrop-blur z-10 text-left&quot;&gt;&#10;                &lt;span *ngIf=&quot;ri === 0&quot; class=&quot;text-slate-400&quot;&gt;0&lt;/span&gt;&#10;                &lt;span *ngIf=&quot;ri &gt; 0&quot;&gt;{{ items[ri - 1]?.name }} &lt;span class=&quot;text-xs text-slate-400&quot;&gt;(p={{ items[ri-1]?.weight }}, v={{ items[ri-1]?.value }})&lt;/span&gt;&lt;/span&gt;&#10;              &lt;/th&gt;&#10;              &lt;td *ngFor=&quot;let c of [].constructor(capacity + 1); let ci = index&quot;&#10;                  [class.cell-current]=&quot;ri === i &amp;&amp; ci === w &amp;&amp; !finished&quot;&#10;                  [class.cell-filled]=&quot;finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w)&quot;&#10;                  [class.cell-empty]=&quot;!(finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w))&quot;&#10;                  class=&quot;cell&quot;&gt;&#10;                &lt;ng-container *ngIf=&quot;finished || ri &lt; i || (ri === i &amp;&amp; ci &lt; w); else waiting&quot;&gt;&#10;                  {{ dp[ri][ci] }}&#10;                &lt;/ng-container&gt;&#10;                &lt;ng-template #waiting&gt;&#10;                  &lt;span class=&quot;text-slate-300&quot;&gt;—&lt;/span&gt;&#10;                &lt;/ng-template&gt;&#10;              &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Fórmula/explicación --&gt;&#10;      &lt;div class=&quot;mt-3 text-sm text-slate-600 dark:text-slate-300 flex flex-wrap items-center gap-3&quot;&gt;&#10;        &lt;div class=&quot;px-3 py-1 rounded-full bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;          &lt;span class=&quot;font-mono&quot;&gt;dp[i][w] = max(dp[i-1][w], value[i] + dp[i-1][w - weight[i]])&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div *ngIf=&quot;i&gt;0&quot; class=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;span class=&quot;inline-flex items-center gap-1 px-2 py-1 rounded bg-white/70 dark:bg-slate-800/70 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;span class=&quot;text-slate-500&quot;&gt;ítem&lt;/span&gt;&#10;            &lt;span class=&quot;font-semibold&quot; [style.color]=&quot;items[i-1]?.color&quot;&gt;{{ items[i-1]?.name }}&lt;/span&gt;&#10;            &lt;span class=&quot;text-slate-500&quot;&gt;p={{ items[i-1]?.weight }}, v={{ items[i-1]?.value }}&lt;/span&gt;&#10;          &lt;/span&gt;&#10;          &lt;span *ngIf=&quot;i&gt;0 &amp;&amp; (i-1) &lt; items.length &amp;&amp; items[i-1].weight &lt;= w&quot; class=&quot;text-emerald-600&quot;&gt;incluible&lt;/span&gt;&#10;          &lt;span *ngIf=&quot;i&gt;0 &amp;&amp; (i-1) &lt; items.length &amp;&amp; items[i-1].weight &gt; w&quot; class=&quot;text-rose-600&quot;&gt;no cabe&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Resultado --&gt;&#10;    &lt;div *ngIf=&quot;finished&quot; class=&quot;mt-2 p-4 rounded-xl border border-emerald-300 dark:border-emerald-700 bg-emerald-50/70 dark:bg-emerald-900/20 flex items-start gap-4&quot;&gt;&#10;      &lt;div class=&quot;text-2xl&quot;&gt;✅&lt;/div&gt;&#10;      &lt;div class=&quot;flex-1&quot;&gt;&#10;        &lt;div class=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;Solución óptima encontrada&lt;/div&gt;&#10;        &lt;div class=&quot;mt-1 text-sm text-emerald-700 dark:text-emerald-200&quot;&gt;Valor máximo: &lt;span class=&quot;font-bold&quot;&gt;{{ dp[items.length][capacity] }}&lt;/span&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;mt-2 flex flex-wrap gap-2&quot;&gt;&#10;          &lt;span *ngFor=&quot;let idx of solution&quot; class=&quot;inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm&quot;&gt;&#10;            &lt;span class=&quot;h-2 w-2 rounded-full&quot; [style.background]=&quot;items[idx].color&quot;&gt;&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm&quot;&gt;{{ items[idx].name }}&lt;/span&gt;&#10;            &lt;span class=&quot;text-xs text-slate-500&quot;&gt;(p={{ items[idx].weight }}, v={{ items[idx].value }})&lt;/span&gt;&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.scss">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.scss" />
              <option name="updatedContent" value="/* Estilos scoped para la experiencia Knapsack 0/1 */&#10;:host {&#10;  display: block;&#10;}&#10;&#10;/* Botones */&#10;.ah-btn {&#10;  @apply inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all select-none&#10;    bg-white/70 dark:bg-slate-800/70 border border-slate-200 dark:border-slate-700 text-slate-700 dark:text-slate-200&#10;    hover:bg-white dark:hover:bg-slate-800 hover:shadow-sm active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-cyan-500/40;&#10;}&#10;.ah-btn-primary {&#10;  @apply bg-gradient-to-br from-cyan-500 to-blue-500 text-white border-transparent shadow-sm&#10;    hover:from-cyan-500 hover:to-indigo-500 hover:shadow-md;&#10;}&#10;.ah-btn-soft {&#10;  @apply bg-slate-50/70 dark:bg-slate-900/40 text-slate-700 dark:text-slate-200;&#10;}&#10;.ah-btn-outline {&#10;  @apply bg-transparent text-slate-700 dark:text-slate-200 border-slate-300 dark:border-slate-600 hover:bg-slate-50/60 dark:hover:bg-slate-800/60;&#10;}&#10;&#10;/* Inputs */&#10;.ah-input {&#10;  @apply w-full rounded-lg border border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-900/40 px-3 py-2 text-sm&#10;    placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-500/40 transition-shadow;&#10;}&#10;&#10;/* Tarjetas suaves para ítems */&#10;.soft-card {&#10;  @apply relative rounded-xl border border-slate-200 dark:border-slate-700 bg-white/80 dark:bg-slate-900/40 p-4 shadow-sm overflow-hidden; &#10;}&#10;.soft-card::after {&#10;  content: &quot;&quot;;&#10;  @apply absolute inset-0 pointer-events-none rounded-xl;&#10;  background: radial-gradient(600px 120px at var(--mx, 50%) -10%, rgba(56,189,248,0.15), transparent 70%);&#10;  opacity: 0;&#10;  transition: opacity 300ms ease;&#10;}&#10;.soft-card:hover::after { opacity: 1; }&#10;.soft-card:hover { @apply shadow-md translate-y-[-1px]; }&#10;&#10;/* DP Table */&#10;.dp-wrap {&#10;  @apply bg-white/70 dark:bg-slate-800/70 backdrop-blur rounded-xl p-4 border border-slate-200 dark:border-slate-700 shadow-sm;&#10;}&#10;.dp-table {&#10;  @apply w-full table-fixed border-collapse; &#10;}&#10;.dp-table thead th {&#10;  @apply text-xs font-semibold text-slate-500 dark:text-slate-400 px-2 py-2 border-b border-slate-200 dark:border-slate-700;&#10;}&#10;.dp-table tbody th {&#10;  @apply text-xs font-medium text-slate-600 dark:text-slate-300 px-2 py-2 border-b border-slate-100 dark:border-slate-800 whitespace-nowrap;&#10;}&#10;.dp-table .cell {&#10;  @apply relative text-center align-middle px-2 py-1 text-sm border-b border-slate-100 dark:border-slate-800 transition-colors; &#10;  min-width: 40px;&#10;}&#10;&#10;/* Estados de celdas */&#10;.cell-empty {&#10;  @apply text-slate-300 dark:text-slate-600 bg-gradient-to-b from-white to-slate-50 dark:from-slate-900 dark:to-slate-900/60;&#10;}&#10;.cell-filled {&#10;  @apply text-slate-800 dark:text-slate-100 bg-white dark:bg-slate-900; &#10;  animation: cell-pop 280ms ease-out both;&#10;}&#10;.cell-current {&#10;  @apply bg-cyan-50 dark:bg-cyan-900/30 text-slate-900 dark:text-white shadow-[inset_0_0_0_1px_rgba(6,182,212,0.35)];&#10;}&#10;.cell-current::after {&#10;  content: &quot;&quot;;&#10;  @apply absolute inset-0 rounded-sm pointer-events-none; &#10;  box-shadow: 0 0 0 2px rgba(6,182,212,0.55), 0 0 24px 4px rgba(6,182,212,0.25);&#10;  animation: pulse-glow 1.2s ease-in-out infinite;&#10;}&#10;&#10;/* Fórmula pill hover glow */&#10;.dp-wrap .font-mono {&#10;  @apply text-slate-700 dark:text-slate-200;&#10;}&#10;.dp-wrap .font-mono:hover {&#10;  text-shadow: 0 0 12px rgba(139,92,246,0.35);&#10;}&#10;&#10;/* Animaciones */&#10;@keyframes pulse-glow {&#10;  0%, 100% { box-shadow: 0 0 0 2px rgba(6,182,212,0.55), 0 0 16px 2px rgba(6,182,212,0.2); }&#10;  50% { box-shadow: 0 0 0 2px rgba(6,182,212,0.75), 0 0 28px 6px rgba(6,182,212,0.35); }&#10;}&#10;@keyframes cell-pop {&#10;  0% { transform: scale(0.98); opacity: .6; }&#10;  60% { transform: scale(1.02); opacity: 1; }&#10;  100% { transform: scale(1); }&#10;}&#10;&#10;/* Mini mejoras de accesibilidad visual */&#10;input[type=&quot;range&quot;] {&#10;  accent-color: currentColor;&#10;}&#10;&#10;/* Badges de resultado */&#10;[ng-reflect-ng-for-of] .inline-flex.rounded-full:hover {&#10;  @apply ring-2 ring-emerald-400/40;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/knapsack-01.component.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-knapsack-01',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './knapsack-01.component.html',&#10;})&#10;export class Knapsack01Component {}&#10;&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;import { FormsModule } from '@angular/forms';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-knapsack-01',&#10;  imports: [CommonModule, FormsModule, RouterLink, UICardComponent],&#10;  templateUrl: './knapsack-01.component.html',&#10;  styleUrls: ['./knapsack-01.component.scss']&#10;})&#10;export class Knapsack01Component {&#10;  items: Array&lt;{ id: number; name: string; weight: number; value: number; color: string }&gt; = [];&#10;  capacity = 10;&#10;  maxCapacity = 20;&#10;&#10;  // DP tables&#10;  dp: number[][] = [];&#10;  take: boolean[][] = [];&#10;&#10;  // stepping state&#10;  i = 0; // row (0..n)&#10;  w = 0; // col (0..capacity)&#10;  running = false;&#10;  autoplay = false;&#10;  speed = 700; // ms&#10;  private timer: any = null;&#10;&#10;  // derived/result&#10;  finished = false;&#10;  solution: number[] = []; // indices of items included&#10;&#10;  ngOnInit() {&#10;    this.seedItems();&#10;    this.resetTables();&#10;  }&#10;&#10;  seedItems() {&#10;    if (this.items.length) return;&#10;    this.items = [&#10;      { id: 1, name: 'Reloj', weight: 3, value: 6, color: '#06b6d4' },&#10;      { id: 2, name: 'Libro', weight: 2, value: 4, color: '#f59e0b' },&#10;      { id: 3, name: 'Cámara', weight: 4, value: 5, color: '#8b5cf6' },&#10;      { id: 4, name: 'Portátil', weight: 5, value: 8, color: '#22c55e' },&#10;    ];&#10;  }&#10;&#10;  resetTables() {&#10;    const n = this.items.length;&#10;    const C = this.capacity;&#10;    this.dp = Array.from({ length: n + 1 }, () =&gt; Array(C + 1).fill(0));&#10;    this.take = Array.from({ length: n + 1 }, () =&gt; Array(C + 1).fill(false));&#10;    this.i = 0;&#10;    this.w = 0;&#10;    this.running = false;&#10;    this.autoplay = false;&#10;    this.finished = false;&#10;    this.solution = [];&#10;    this.clearTimer();&#10;  }&#10;&#10;  onCapacityChange() {&#10;    if (this.capacity &gt; this.maxCapacity) this.capacity = this.maxCapacity;&#10;    if (this.capacity &lt; 0) this.capacity = 0;&#10;    this.resetTables();&#10;  }&#10;&#10;  addItem() {&#10;    const id = Math.max(0, ...this.items.map(i =&gt; i.id)) + 1;&#10;    const palette = ['#06b6d4', '#f59e0b', '#8b5cf6', '#22c55e', '#ef4444', '#0ea5e9', '#e879f9'];&#10;    const color = palette[id % palette.length];&#10;    const weight = Math.max(1, Math.floor(Math.random() * 6));&#10;    const value = Math.max(1, Math.floor(Math.random() * 10));&#10;    this.items.push({ id, name: `Item ${id}`, weight, value, color });&#10;    this.resetTables();&#10;  }&#10;&#10;  removeItem(index: number) {&#10;    this.items.splice(index, 1);&#10;    this.resetTables();&#10;  }&#10;&#10;  randomize() {&#10;    this.items.forEach(it =&gt; {&#10;      it.weight = Math.max(1, Math.floor(Math.random() * 6));&#10;      it.value = Math.max(1, Math.floor(Math.random() * 12));&#10;    });&#10;    this.capacity = Math.min(this.maxCapacity, Math.max(4, Math.floor(Math.random() * 16)));&#10;    this.resetTables();&#10;  }&#10;&#10;  toggleAutoplay() {&#10;    this.autoplay = !this.autoplay;&#10;    if (this.autoplay) {&#10;      this.running = true;&#10;      this.timer = setInterval(() =&gt; {&#10;        if (!this.stepForward()) {&#10;          this.autoplay = false;&#10;          this.running = false;&#10;          this.clearTimer();&#10;        }&#10;      }, this.speed);&#10;    } else {&#10;      this.running = false;&#10;      this.clearTimer();&#10;    }&#10;  }&#10;&#10;  setSpeed(ms: number) {&#10;    this.speed = ms;&#10;    if (this.autoplay) {&#10;      this.clearTimer();&#10;      this.toggleAutoplay(); // will stop, so start again&#10;      this.toggleAutoplay();&#10;    }&#10;  }&#10;&#10;  stepForward(): boolean {&#10;    if (this.finished) return false;&#10;    const n = this.items.length;&#10;    const C = this.capacity;&#10;&#10;    // advance to next cell (i, w)&#10;    if (this.i === 0 &amp;&amp; this.w === 0) {&#10;      // first cell is already 0&#10;    }&#10;&#10;    // compute current cell if inside table and not first row&#10;    if (!(this.i === 0)) {&#10;      const item = this.items[this.i - 1];&#10;      if (item) {&#10;        if (item.weight &lt;= this.w) {&#10;          const include = item.value + this.dp[this.i - 1][this.w - item.weight];&#10;          const exclude = this.dp[this.i - 1][this.w];&#10;          if (include &gt; exclude) {&#10;            this.dp[this.i][this.w] = include;&#10;            this.take[this.i][this.w] = true;&#10;          } else {&#10;            this.dp[this.i][this.w] = exclude;&#10;            this.take[this.i][this.w] = false;&#10;          }&#10;        } else {&#10;          this.dp[this.i][this.w] = this.dp[this.i - 1][this.w];&#10;          this.take[this.i][this.w] = false;&#10;        }&#10;      }&#10;    }&#10;&#10;    // move pointer to next cell&#10;    if (this.w &lt; C) {&#10;      this.w++;&#10;    } else {&#10;      this.w = 0;&#10;      if (this.i &lt; n) {&#10;        this.i++;&#10;      } else {&#10;        // finished filling last cell&#10;        this.finished = true;&#10;        this.running = false;&#10;        this.clearTimer();&#10;        this.backtrackSolution();&#10;        return false;&#10;      }&#10;    }&#10;    this.running = true;&#10;    return true;&#10;  }&#10;&#10;  stepBackward() {&#10;    // Recompute up to previous cell for simplicity&#10;    const prev = this.linearIndex() - 1;&#10;    if (prev &lt; 0) return;&#10;    this.resetTables();&#10;    for (let k = 0; k &lt;= prev; k++) this.stepForward();&#10;    this.running = false;&#10;    this.autoplay = false;&#10;  }&#10;&#10;  private linearIndex(): number {&#10;    return this.i * (this.capacity + 1) + this.w;&#10;  }&#10;&#10;  private backtrackSolution() {&#10;    const n = this.items.length;&#10;    let w = this.capacity;&#10;    const chosen: number[] = [];&#10;    for (let i = n; i &gt;= 1; i--) {&#10;      if (this.take[i][w]) {&#10;        chosen.push(i - 1);&#10;        w -= this.items[i - 1].weight;&#10;      }&#10;    }&#10;    this.solution = chosen.reverse();&#10;  }&#10;&#10;  clearTimer() {&#10;    if (this.timer) {&#10;      clearInterval(this.timer);&#10;      this.timer = null;&#10;    }&#10;  }&#10;&#10;  trackByIndex(i: number) { return i; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kruskal.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kruskal.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Kruskal&quot; subtitle=&quot;graph · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Kruskal.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kruskal.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/kruskal.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-kruskal',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './kruskal.component.html',&#10;})&#10;export class KruskalComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/lis.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/lis.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Longest Increasing Subsequence (LIS)&quot; subtitle=&quot;dp · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para LIS.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/lis.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/lis.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-lis',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './lis.component.html',&#10;})&#10;export class LisComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/merge-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/merge-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Merge Sort&quot; subtitle=&quot;sorting · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Merge Sort.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/merge-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/merge-sort.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-merge-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './merge-sort.component.html',&#10;})&#10;export class MergeSortComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/prim.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/prim.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Prim&quot; subtitle=&quot;graph · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Prim.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/prim.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/prim.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-prim',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './prim.component.html',&#10;})&#10;export class PrimComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/quick-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/quick-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Quick Sort&quot; subtitle=&quot;sorting · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Quick Sort.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/quick-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/quick-sort.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-quick-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './quick-sort.component.html',&#10;})&#10;export class QuickSortComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/rabin-karp.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/rabin-karp.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Rabin-Karp&quot; subtitle=&quot;string · medium&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Rabin-Karp.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/rabin-karp.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/rabin-karp.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-rabin-karp',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './rabin-karp.component.html',&#10;})&#10;export class RabinKarpComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/selection-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/selection-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Selection Sort&quot; subtitle=&quot;sorting · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Selection Sort.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/selection-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/selection-sort.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-selection-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './selection-sort.component.html',&#10;})&#10;export class SelectionSortComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/topological-sort.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/topological-sort.component.html" />
              <option name="updatedContent" value="&lt;a routerLink=&quot;/algorithms&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;← Volver&lt;/a&gt;&#10;&lt;ui-card title=&quot;Topological Sort&quot; subtitle=&quot;graph · easy&quot;&gt;&#10;  &lt;div class=&quot;prose max-w-none&quot;&gt;&#10;    &lt;p&gt;Página personalizada para Topological Sort.&lt;/p&gt;&#10;  &lt;/div&gt;&#10;&lt;/ui-card&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/topological-sort.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/algorithms/custom/topological-sort.component.ts" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../../ui/card.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ah-topological-sort',&#10;  imports: [CommonModule, RouterLink, UICardComponent],&#10;  templateUrl: './topological-sort.component.html',&#10;})&#10;export class TopologicalSortComponent {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/auth/login.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/auth/login.component.ts" />
              <option name="originalContent" value="import { Component, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;import { Router, RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../ui/card.component';&#10;import { UIInputComponent } from '../../ui/input.component';&#10;import { UIButtonComponent } from '../../ui/button.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-login',&#10;  imports: [CommonModule, ReactiveFormsModule, RouterLink, UICardComponent, UIInputComponent, UIButtonComponent],&#10;  template: `&#10;    &lt;div class=&quot;min-h-[70vh] flex items-center justify-center&quot;&gt;&#10;      &lt;div class=&quot;w-full max-w-md&quot;&gt;&#10;        &lt;ui-card title=&quot;Iniciar sesión&quot; [hasActions]=&quot;true&quot;&gt;&#10;          &lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot; class=&quot;space-y-4&quot;&gt;&#10;            &lt;ui-input label=&quot;Email&quot; type=&quot;email&quot; autoComplete=&quot;email&quot; formControlName=&quot;email&quot; placeholder=&quot;tucorreo@dominio.com&quot; /&gt;&#10;            &lt;ui-input label=&quot;Contraseña&quot; type=&quot;password&quot; autoComplete=&quot;current-password&quot; formControlName=&quot;password&quot; placeholder=&quot;••••••••&quot; /&gt;&#10;            &lt;p *ngIf=&quot;error&quot; class=&quot;text-sm text-red-600&quot;&gt;{{ error }}&lt;/p&gt;&#10;            &lt;div class=&quot;flex items-center justify-between&quot; card-actions&gt;&#10;              &lt;a routerLink=&quot;/auth/register&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;Crear cuenta&lt;/a&gt;&#10;              &lt;ui-button type=&quot;submit&quot; [loading]=&quot;loading&quot;&gt;Entrar&lt;/ui-button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/ui-card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class LoginComponent {&#10;  private fb = inject(FormBuilder);&#10;  private auth = inject(AuthService);&#10;  private router = inject(Router);&#10;&#10;  loading = false;&#10;  error = '';&#10;&#10;  form = this.fb.group({&#10;    email: ['', [Validators.required, Validators.email]],&#10;    password: ['', [Validators.required, Validators.minLength(8)]],&#10;  });&#10;&#10;  onSubmit() {&#10;    if (this.form.invalid) return;&#10;    this.loading = true;&#10;    this.error = '';&#10;    this.auth&#10;      .login(this.form.getRawValue() as any)&#10;      .subscribe({&#10;        next: () =&gt; this.router.navigate(['/progress']),&#10;        error: (err) =&gt; {&#10;          this.error = err?.error?.message || 'Error al iniciar sesión';&#10;          this.loading = false;&#10;        },&#10;      });&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Component, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;import { Router, RouterLink } from '@angular/router';&#10;import { UICardComponent } from '../../ui/card.component';&#10;import { UIInputComponent } from '../../ui/input.component';&#10;import { UIButtonComponent } from '../../ui/button.component';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-login',&#10;  imports: [CommonModule, ReactiveFormsModule, RouterLink, UICardComponent, UIInputComponent, UIButtonComponent],&#10;  template: `&#10;    &lt;div class=&quot;min-h-[70vh] flex items-center justify-center&quot;&gt;&#10;      &lt;div class=&quot;w-full max-w-md&quot;&gt;&#10;        &lt;ui-card title=&quot;Iniciar sesión&quot; [hasActions]=&quot;true&quot;&gt;&#10;          &lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot; class=&quot;space-y-4&quot;&gt;&#10;            &lt;ui-input label=&quot;Email&quot; type=&quot;email&quot; autoComplete=&quot;email&quot; formControlName=&quot;email&quot; placeholder=&quot;tucorreo@dominio.com&quot; /&gt;&#10;            &lt;ui-input label=&quot;Contraseña&quot; type=&quot;password&quot; autoComplete=&quot;current-password&quot; formControlName=&quot;password&quot; placeholder=&quot;••••••••&quot; /&gt;&#10;            &lt;p *ngIf=&quot;error&quot; class=&quot;text-sm text-red-600&quot;&gt;{{ error }}&lt;/p&gt;&#10;            &lt;div class=&quot;card-actions flex items-center justify-between&quot;&gt;&#10;              &lt;a routerLink=&quot;/auth/register&quot; class=&quot;text-sm text-gray-600 hover:text-gray-900&quot;&gt;Crear cuenta&lt;/a&gt;&#10;              &lt;ui-button type=&quot;submit&quot; [loading]=&quot;loading&quot;&gt;Entrar&lt;/ui-button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/ui-card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class LoginComponent {&#10;  private fb = inject(FormBuilder);&#10;  private auth = inject(AuthService);&#10;  private router = inject(Router);&#10;&#10;  loading = false;&#10;  error = '';&#10;&#10;  form = this.fb.group({&#10;    email: ['', [Validators.required, Validators.email]],&#10;    password: ['', [Validators.required, Validators.minLength(8)]],&#10;  });&#10;&#10;  onSubmit() {&#10;    if (this.form.invalid) return;&#10;    this.loading = true;&#10;    this.error = '';&#10;    this.auth&#10;      .login(this.form.getRawValue() as any)&#10;      .subscribe({&#10;        next: () =&gt; this.router.navigate(['/progress']),&#10;        error: (err) =&gt; {&#10;          this.error = err?.error?.message || 'Error al iniciar sesión';&#10;          this.loading = false;&#10;        },&#10;      });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/auth/register.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/auth/register.component.ts" />
              <option name="updatedContent" value="import { Component, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';&#10;import { AuthService } from '../../core/auth/auth.service';&#10;import { Router, RouterLink } from '@angular/router';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-register',&#10;  imports: [CommonModule, ReactiveFormsModule, RouterLink],&#10;  template: `&#10;    &lt;h2&gt;Registro&lt;/h2&gt;&#10;    &lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;&#10;      &lt;label&gt;Nombre&#10;        &lt;input type=&quot;text&quot; formControlName=&quot;name&quot; required /&gt;&#10;      &lt;/label&gt;&#10;      &lt;label&gt;Email&#10;        &lt;input type=&quot;email&quot; formControlName=&quot;email&quot; required /&gt;&#10;      &lt;/label&gt;&#10;      &lt;label&gt;Contraseña&#10;        &lt;input type=&quot;password&quot; formControlName=&quot;password&quot; required minlength=&quot;8&quot; /&gt;&#10;      &lt;/label&gt;&#10;      &lt;button type=&quot;submit&quot; [disabled]=&quot;form.invalid || loading&quot;&gt;Crear cuenta&lt;/button&gt;&#10;      &lt;span *ngIf=&quot;error&quot; style=&quot;color:red&quot;&gt;{{ error }}&lt;/span&gt;&#10;    &lt;/form&gt;&#10;    &lt;p&gt;¿Ya tienes cuenta? &lt;a routerLink=&quot;/auth/login&quot;&gt;Inicia sesión&lt;/a&gt;&lt;/p&gt;&#10;  `,&#10;})&#10;export class RegisterComponent {&#10;  private fb = inject(FormBuilder);&#10;  private auth = inject(AuthService);&#10;  private router = inject(Router);&#10;&#10;  loading = false;&#10;  error = '';&#10;&#10;  form = this.fb.group({&#10;    name: ['', [Validators.required, Validators.minLength(2)]],&#10;    email: ['', [Validators.required, Validators.email]],&#10;    password: ['', [Validators.required, Validators.minLength(8)]],&#10;  });&#10;&#10;  onSubmit() {&#10;    if (this.form.invalid) return;&#10;    this.loading = true;&#10;    this.error = '';&#10;    this.auth&#10;      .register(this.form.getRawValue() as any)&#10;      .subscribe({&#10;        next: () =&gt; this.router.navigate(['/progress']),&#10;        error: (err) =&gt; {&#10;          this.error = err?.error?.message || 'Error al registrarse';&#10;          this.loading = false;&#10;        },&#10;      });&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/features/progress/progress.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/features/progress/progress.component.ts" />
              <option name="updatedContent" value="import { Component, OnInit, inject } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { ProgressService, ProgressSummary } from '../../core/progress/progress.service';&#10;import { RouterLink } from '@angular/router';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'app-progress',&#10;  imports: [CommonModule, RouterLink],&#10;  template: `&#10;    &lt;h2&gt;Tu progreso&lt;/h2&gt;&#10;    &lt;div *ngIf=&quot;loading&quot;&gt;Cargando...&lt;/div&gt;&#10;    &lt;div *ngIf=&quot;!loading&quot;&gt;&#10;      &lt;p&gt;&#10;        Aprendidos: &lt;strong&gt;{{ summary?.learned || 0 }}&lt;/strong&gt; / {{ summary?.total || 0 }}&#10;        ({{ summary?.percent || 0 }}%)&#10;      &lt;/p&gt;&#10;      &lt;h3&gt;Algoritmos aprendidos&lt;/h3&gt;&#10;      &lt;ul&gt;&#10;        &lt;li *ngFor=&quot;let a of learned&quot;&gt;&#10;          &lt;a [routerLink]=&quot;['/algorithms', a.slug]&quot;&gt;{{ a.name }}&lt;/a&gt;&#10;        &lt;/li&gt;&#10;      &lt;/ul&gt;&#10;      &lt;p *ngIf=&quot;learned.length === 0&quot;&gt;Aún no has marcado algoritmos como aprendidos.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class ProgressComponent implements OnInit {&#10;  private progress = inject(ProgressService);&#10;&#10;  summary: ProgressSummary | null = null;&#10;  learned: { slug: string; name: string }[] = [];&#10;  loading = true;&#10;&#10;  ngOnInit() {&#10;    this.loading = true;&#10;    this.progress.getSummary().subscribe((s) =&gt; (this.summary = s));&#10;    this.progress.getLearned().subscribe((l) =&gt; {&#10;      this.learned = l.learned as any;&#10;      this.loading = false;&#10;    });&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/ui/badge.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/ui/badge.component.ts" />
              <option name="originalContent" value="import { Component, Input } from '@angular/core';&#10;import { NgClass } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-badge',&#10;  imports: [NgClass],&#10;  template: `&#10;    &lt;span [ngClass]=&quot;['inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium', colorClass]&quot;&gt;&#10;      &lt;ng-content /&gt;&#10;    &lt;/span&gt;&#10;  `,&#10;})&#10;export class UIBadgeComponent {&#10;  @Input() variant: 'primary' | 'green' | 'yellow' | 'red' | 'gray' = 'gray';&#10;  get colorClass() {&#10;    switch (this.variant) {&#10;      case 'primary': return 'bg-primary-100 text-primary-700';&#10;      case 'green': return 'bg-emerald-100 text-emerald-700';&#10;      case 'yellow': return 'bg-amber-100 text-amber-800';&#10;      case 'red': return 'bg-rose-100 text-rose-700';&#10;      default: return 'bg-gray-100 text-gray-700';&#10;    }&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Component, Input } from '@angular/core';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-badge',&#10;  template: `&#10;    &lt;span [class]=&quot;'inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium ' + colorClass&quot;&gt;&#10;      &lt;ng-content /&gt;&#10;    &lt;/span&gt;&#10;  `,&#10;})&#10;export class UIBadgeComponent {&#10;  @Input() variant: 'primary' | 'green' | 'yellow' | 'red' | 'gray' = 'gray';&#10;  get colorClass() {&#10;    switch (this.variant) {&#10;      case 'primary': return 'bg-primary-100 text-primary-700';&#10;      case 'green': return 'bg-emerald-100 text-emerald-700';&#10;      case 'yellow': return 'bg-amber-100 text-amber-800';&#10;      case 'red': return 'bg-rose-100 text-rose-700';&#10;      default: return 'bg-gray-100 text-gray-700';&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/ui/button.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/ui/button.component.ts" />
              <option name="updatedContent" value="import { Component, Input } from '@angular/core';&#10;import { NgClass, NgIf } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-button',&#10;  imports: [NgClass, NgIf],&#10;  template: `&#10;    &lt;button&#10;      [attr.type]=&quot;type&quot;&#10;      [disabled]=&quot;disabled || loading&quot;&#10;      [ngClass]=&quot;[&#10;        'btn',&#10;        sizeClass,&#10;        variantClass,&#10;        fullWidth ? 'w-full' : ''&#10;      ]&quot;&#10;    &gt;&#10;      &lt;span *ngIf=&quot;loading&quot; class=&quot;mr-2 inline-block h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent&quot;&gt;&lt;/span&gt;&#10;      &lt;ng-content /&gt;&#10;    &lt;/button&gt;&#10;  `,&#10;})&#10;export class UIButtonComponent {&#10;  @Input() type: 'button' | 'submit' | 'reset' = 'button';&#10;  @Input() variant: 'primary' | 'secondary' | 'outline' | 'ghost' = 'primary';&#10;  @Input() size: 'sm' | 'md' | 'lg' = 'md';&#10;  @Input() fullWidth = false;&#10;  @Input() disabled = false;&#10;  @Input() loading = false;&#10;&#10;  get variantClass() {&#10;    switch (this.variant) {&#10;      case 'secondary': return 'btn-secondary';&#10;      case 'outline': return 'btn-outline';&#10;      case 'ghost': return 'btn-ghost';&#10;      default: return 'btn-primary';&#10;    }&#10;  }&#10;  get sizeClass() {&#10;    switch (this.size) {&#10;      case 'sm': return 'btn-sm';&#10;      case 'lg': return 'btn-lg';&#10;      default: return 'btn-md';&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/ui/card.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/ui/card.component.ts" />
              <option name="originalContent" value="import { Component, Input } from '@angular/core';&#10;import { NgClass, NgIf } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-card',&#10;  imports: [NgClass, NgIf],&#10;  template: `&#10;    &lt;div class=&quot;bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg shadow-card&quot;&gt;&#10;      &lt;div *ngIf=&quot;title || subtitle&quot; class=&quot;px-4 py-3 border-b border-gray-200 dark:border-gray-800&quot;&gt;&#10;        &lt;h3 class=&quot;text-base font-semibold text-gray-900 dark:text-gray-100&quot;&gt;{{ title }}&lt;/h3&gt;&#10;        &lt;p *ngIf=&quot;subtitle&quot; class=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;{{ subtitle }}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;p-4&quot;&gt;&#10;        &lt;ng-content /&gt;&#10;      &lt;/div&gt;&#10;      &lt;div *ngIf=&quot;hasActions&quot; class=&quot;px-4 py-3 border-t border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-950 rounded-b-lg&quot;&gt;&#10;        &lt;ng-content select=&quot;[card-actions]&quot; /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class UICardComponent {&#10;  @Input() title = '';&#10;  @Input() subtitle = '';&#10;  @Input() hasActions = false;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Component, Input } from '@angular/core';&#10;import { NgIf } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-card',&#10;  imports: [NgIf],&#10;  template: `&#10;    &lt;div class=&quot;bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg shadow-card&quot;&gt;&#10;      &lt;div *ngIf=&quot;title || subtitle&quot; class=&quot;px-4 py-3 border-b border-gray-200 dark:border-gray-800&quot;&gt;&#10;        &lt;h3 class=&quot;text-base font-semibold text-gray-900 dark:text-gray-100&quot;&gt;{{ title }}&lt;/h3&gt;&#10;        &lt;p *ngIf=&quot;subtitle&quot; class=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;{{ subtitle }}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;p-4&quot;&gt;&#10;        &lt;ng-content /&gt;&#10;      &lt;/div&gt;&#10;      &lt;div *ngIf=&quot;hasActions&quot; class=&quot;px-4 py-3 border-t border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-950 rounded-b-lg&quot;&gt;&#10;        &lt;ng-content select=&quot;.card-actions&quot; /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  `,&#10;})&#10;export class UICardComponent {&#10;  @Input() title = '';&#10;  @Input() subtitle = '';&#10;  @Input() hasActions = false;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/ui/input.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/ui/input.component.ts" />
              <option name="originalContent" value="import { Component, forwardRef, Input } from '@angular/core';&#10;import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';&#10;import { NgIf } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-input',&#10;  imports: [NgIf],&#10;  providers: [&#10;    {&#10;      provide: NG_VALUE_ACCESSOR,&#10;      useExisting: forwardRef(() =&gt; UIInputComponent),&#10;      multi: true,&#10;    },&#10;  ],&#10;  template: `&#10;    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot; *ngIf=&quot;label&quot;&gt;{{ label }}&lt;/label&gt;&#10;    &lt;input&#10;      class=&quot;block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-primary-500 focus:ring-primary-500&quot;&#10;      [attr.type]=&quot;type&quot;&#10;      [attr.placeholder]=&quot;placeholder&quot;&#10;      [attr.autocomplete]=&quot;autoComplete&quot;&#10;      [disabled]=&quot;disabled&quot;&#10;      [value]=&quot;value ?? ''&quot;&#10;      (input)=&quot;onChange(($event.target as HTMLInputElement).value)&quot;&#10;      (blur)=&quot;onTouched()&quot;&#10;    /&gt;&#10;    &lt;p *ngIf=&quot;hint&quot; class=&quot;mt-1 text-xs text-gray-500&quot;&gt;{{ hint }}&lt;/p&gt;&#10;  `,&#10;})&#10;export class UIInputComponent implements ControlValueAccessor {&#10;  @Input() label = '';&#10;  @Input() placeholder = '';&#10;  @Input() hint = '';&#10;  @Input() type: 'text' | 'email' | 'password' = 'text';&#10;  @Input() autoComplete = 'off';&#10;&#10;  disabled = false;&#10;  value: any = '';&#10;  onChange: (val: any) =&gt; void = () =&gt; {};&#10;  onTouched: () =&gt; void = () =&gt; {};&#10;&#10;  writeValue(obj: any): void { this.value = obj; }&#10;  registerOnChange(fn: any): void { this.onChange = fn; }&#10;  registerOnTouched(fn: any): void { this.onTouched = fn; }&#10;  setDisabledState?(isDisabled: boolean): void { this.disabled = isDisabled; }&#10;}&#10;" />
              <option name="updatedContent" value="import { Component, forwardRef, Input } from '@angular/core';&#10;import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';&#10;import { NgIf } from '@angular/common';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-input',&#10;  imports: [NgIf],&#10;  providers: [&#10;    {&#10;      provide: NG_VALUE_ACCESSOR,&#10;      useExisting: forwardRef(() =&gt; UIInputComponent),&#10;      multi: true,&#10;    },&#10;  ],&#10;  template: `&#10;    &lt;label class=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot; *ngIf=&quot;label&quot;&gt;{{ label }}&lt;/label&gt;&#10;    &lt;input&#10;      class=&quot;block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-primary-500 focus:ring-primary-500&quot;&#10;      [attr.type]=&quot;type&quot;&#10;      [attr.placeholder]=&quot;placeholder&quot;&#10;      [attr.autocomplete]=&quot;autoComplete&quot;&#10;      [disabled]=&quot;disabled&quot;&#10;      [value]=&quot;value ?? ''&quot;&#10;      (input)=&quot;onChange($any($event.target).value)&quot;&#10;      (blur)=&quot;onTouched()&quot;&#10;    /&gt;&#10;    &lt;p *ngIf=&quot;hint&quot; class=&quot;mt-1 text-xs text-gray-500&quot;&gt;{{ hint }}&lt;/p&gt;&#10;  `,&#10;})&#10;export class UIInputComponent implements ControlValueAccessor {&#10;  @Input() label = '';&#10;  @Input() placeholder = '';&#10;  @Input() hint = '';&#10;  @Input() type: 'text' | 'email' | 'password' = 'text';&#10;  @Input() autoComplete = 'off';&#10;&#10;  disabled = false;&#10;  value: any = '';&#10;  onChange: (val: any) =&gt; void = () =&gt; {};&#10;  onTouched: () =&gt; void = () =&gt; {};&#10;&#10;  writeValue(obj: any): void { this.value = obj; }&#10;  registerOnChange(fn: any): void { this.onChange = fn; }&#10;  registerOnTouched(fn: any): void { this.onTouched = fn; }&#10;  setDisabledState?(isDisabled: boolean): void { this.disabled = isDisabled; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/ui/spinner.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/ui/spinner.component.ts" />
              <option name="updatedContent" value="import { Component, Input } from '@angular/core';&#10;&#10;@Component({&#10;  standalone: true,&#10;  selector: 'ui-spinner',&#10;  template: `&#10;    &lt;span&#10;      [class]=&quot;'inline-block rounded-full border-2 border-current border-t-transparent animate-spin ' + sizeClass&quot;&#10;      role=&quot;status&quot;&#10;      aria-label=&quot;Cargando&quot;&#10;    &gt;&lt;/span&gt;&#10;  `,&#10;})&#10;export class UISpinnerComponent {&#10;  @Input() size: 'sm' | 'md' | 'lg' = 'md';&#10;  get sizeClass() {&#10;    switch (this.size) {&#10;      case 'sm': return 'w-4 h-4';&#10;      case 'lg': return 'w-8 h-8';&#10;      default: return 'w-6 h-6';&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/environments/environment.development.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/environments/environment.development.ts" />
              <option name="updatedContent" value="export const environment = {&#10;  production: false,&#10;  apiBaseUrl: 'http://localhost:3000/api/v1',&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/environments/environment.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/environments/environment.ts" />
              <option name="updatedContent" value="export const environment = {&#10;  production: true,&#10;  // En producción (Docker/nginx) el frontend y backend suelen estar detrás del mismo host&#10;  // Ajusta si backend está en otro dominio&#10;  apiBaseUrl: '/api/v1',&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/styles.scss">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/styles.scss" />
              <option name="originalContent" value="/* You can add global styles to this file, and also import other style files */&#10;" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;/* Estilos globales */&#10;html, body { height: 100%; }&#10;body { @apply bg-gray-50 text-gray-900; }&#10;&#10;a { @apply text-primary-600 hover:text-primary-700 underline-offset-4; }&#10;&#10;.container { @apply mx-auto max-w-6xl px-4; }&#10;&#10;/* Utilidades personalizadas */&#10;.btn { @apply inline-flex items-center justify-center rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed; }&#10;.btn-primary { @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-600; }&#10;.btn-secondary { @apply bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-300; }&#10;.btn-outline { @apply border border-gray-300 text-gray-900 hover:bg-gray-50; }&#10;.btn-ghost { @apply text-gray-700 hover:bg-gray-100; }&#10;&#10;.btn-sm { @apply px-2.5 py-1.5 text-sm; }&#10;.btn-md { @apply px-4 py-2; }&#10;.btn-lg { @apply px-5 py-3 text-lg; }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tailwind.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tailwind.config.js" />
              <option name="originalContent" value="/**** TailwindCSS Config (Angular 17) ****/&#10;/** @type {import('tailwindcss').Config} */&#10;module.exports = {&#10;  content: [&#10;    './src/**/*.{html,ts}',&#10;  ],&#10;  theme: {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: '#eef2ff', 100: '#e0e7ff', 200: '#c7d2fe', 300: '#a5b4fc', 400: '#818cf8',&#10;          500: '#6366f1', 600: '#4f46e5', 700: '#4338ca', 800: '#3730a3', 900: '#312e81'&#10;        },&#10;        accent: '#22d3ee',&#10;      },&#10;    },&#10;  },&#10;  plugins: [&#10;    require('@tailwindcss/forms'),&#10;    require('@tailwindcss/typography'),&#10;  ],&#10;};&#10;&#10;" />
              <option name="updatedContent" value="/**** TailwindCSS Config (Angular 17) ****/&#10;/** @type {import('tailwindcss').Config} */&#10;module.exports = {&#10;  darkMode: 'class',&#10;  content: [&#10;    './src/**/*.{html,ts}',&#10;  ],&#10;  theme: {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: '#eef2ff', 100: '#e0e7ff', 200: '#c7d2fe', 300: '#a5b4fc', 400: '#818cf8',&#10;          500: '#6366f1', 600: '#4f46e5', 700: '#4338ca', 800: '#3730a3', 900: '#312e81'&#10;        },&#10;        accent: '#22d3ee',&#10;      },&#10;      boxShadow: {&#10;        card: '0 1px 2px rgba(0,0,0,0.06), 0 1px 3px rgba(0,0,0,0.1)'&#10;      }&#10;    },&#10;  },&#10;  plugins: [&#10;    require('@tailwindcss/forms'),&#10;    require('@tailwindcss/typography'),&#10;  ],&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>