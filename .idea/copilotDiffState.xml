<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Algorithm Hub&#10;&#10;Aplicación full-stack para aprender algoritmos. Frontend en Angular, backend en NestJS con TypeORM y MariaDB. Los usuarios pueden registrarse, explorar un catálogo de 20 algoritmos predefinidos, marcarlos como aprendidos y ver su progreso global.&#10;&#10;Contenido clave&#10;- Stack: Angular 17+, NestJS 10+, TypeScript, TypeORM, MariaDB 10.6+, JWT, ESLint, Prettier.&#10;- Arquitectura: monorepo simple con carpetas frontend/ y backend/ y docs/.&#10;- Calidad: Clean Code, SOLID, pruebas unitarias y e2e, CI/CD sugerido con GitHub Actions.&#10;&#10;Estructura del repositorio&#10;- frontend/ Aplicación Angular&#10;- backend/ API NestJS (TypeORM + MariaDB)&#10;- docs/ Documentación técnica y funcional&#10;- README.md Este archivo&#10;&#10;Requisitos&#10;- Node.js LTS (&gt;= 20)&#10;- npm o pnpm (recomendado pnpm &gt;= 9)&#10;- MariaDB 10.6+ o Docker Desktop&#10;- Angular CLI y Nest CLI (opcional para desarrollo):&#10;  - npm i -g @angular/cli @nestjs/cli&#10;&#10;Configuración rápida (local)&#10;1) Base de datos&#10;- Opción Docker: ver docs/deploy.md para docker-compose con MariaDB&#10;- Opción local:&#10;  - Crear base de datos algorithm_hub y usuario con permisos&#10;2) Variables de entorno&#10;- Backend: crear backend/.env con&#10;  - DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME&#10;  - JWT_SECRET, JWT_EXPIRES_IN&#10;- Frontend: ajustar environments en Angular para API_URL&#10;3) Instalación&#10;- cd frontend &amp;&amp; npm i&#10;- cd backend &amp;&amp; npm i&#10;4) Migraciones y seed&#10;- Ejecutar migraciones TypeORM&#10;- Ejecutar seed inicial de 20 algoritmos&#10;5) Ejecutar&#10;- Backend: npm run start:dev&#10;- Frontend: npm start&#10;&#10;Características&#10;- Registro e inicio de sesión con JWT&#10;- Listado y detalle de 20 algoritmos predefinidos&#10;- Marcar/desmarcar algoritmo como aprendido&#10;- Cálculo de progreso global (aprendidos/total)&#10;&#10;Documentación&#10;- docs/architecture.md Arquitectura general y módulos&#10;- docs/api.md Contrato de API REST&#10;- docs/db.md Esquema de datos y entidades&#10;- docs/algorithms.md Lista de 20 algoritmos&#10;- docs/setup-local.md Guía detallada de instalación en macOS&#10;- docs/deploy.md Despliegue con Docker Compose&#10;- docs/coding-standards.md Estándares de código (Clean Code)&#10;- docs/contributing.md Flujo de contribución y calidad&#10;- docs/security.md Consideraciones de seguridad&#10;&#10;Buenas prácticas&#10;- Lint y formateo: ESLint + Prettier&#10;- Commits: Conventional Commits&#10;- Revisión de código obligatoria en PRs&#10;&#10;Licencia&#10;- MIT (sugerida)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.env" />
              <option name="updatedContent" value="# Entorno por defecto para desarrollo local&#10;NODE_ENV=development&#10;PORT=3000&#10;&#10;# JWT&#10;JWT_SECRET=supersecret_dev_token_please_change&#10;JWT_EXPIRES_IN=1h&#10;&#10;# Base de datos local (si no usas Docker)&#10;DB_HOST=localhost&#10;DB_PORT=3306&#10;DB_USER=algouser&#10;DB_PASSWORD=algopass&#10;DB_NAME=algorithm_hub&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;jest&quot;,&#10;    &quot;test:watch&quot;: &quot;jest --watch&quot;,&#10;    &quot;test:cov&quot;: &quot;jest --coverage&quot;,&#10;    &quot;test:debug&quot;: &quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;,&#10;    &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@nestjs/jwt&quot;: &quot;^10.2.0&quot;,&#10;    &quot;@nestjs/passport&quot;: &quot;^10.0.3&quot;,&#10;    &quot;@nestjs/typeorm&quot;: &quot;^10.0.2&quot;,&#10;    &quot;argon2&quot;: &quot;^0.40.1&quot;,&#10;    &quot;class-transformer&quot;: &quot;^0.5.1&quot;,&#10;    &quot;class-validator&quot;: &quot;^0.14.1&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-jwt&quot;: &quot;^4.0.1&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.0&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.1&quot;,&#10;    &quot;typeorm&quot;: &quot;^0.3.20&quot;,&#10;    &quot;mysql2&quot;: &quot;^3.11.3&quot;&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@nestjs/cli&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@types/express&quot;: &quot;^5.0.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^29.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^20.3.1&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.0.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^9.0.0&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.0.0&quot;,&#10;    &quot;jest&quot;: &quot;^29.5.0&quot;,&#10;    &quot;prettier&quot;: &quot;^3.0.0&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^7.0.0&quot;,&#10;    &quot;ts-jest&quot;: &quot;^29.1.0&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.4.3&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.1&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.1.3&quot;&#10;  },&#10;  &quot;jest&quot;: {&#10;    &quot;moduleFileExtensions&quot;: [&#10;      &quot;js&quot;,&#10;      &quot;json&quot;,&#10;      &quot;ts&quot;&#10;    ],&#10;    &quot;rootDir&quot;: &quot;src&quot;,&#10;    &quot;testRegex&quot;: &quot;.*\\.spec\\.ts$&quot;,&#10;    &quot;transform&quot;: {&#10;      &quot;^.+\\.(t|j)s$&quot;: &quot;ts-jest&quot;&#10;    },&#10;    &quot;collectCoverageFrom&quot;: [&#10;      &quot;**/*.(t|j)s&quot;&#10;    ],&#10;    &quot;coverageDirectory&quot;: &quot;../coverage&quot;,&#10;    &quot;testEnvironment&quot;: &quot;node&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;jest&quot;,&#10;    &quot;test:watch&quot;: &quot;jest --watch&quot;,&#10;    &quot;test:cov&quot;: &quot;jest --coverage&quot;,&#10;    &quot;test:debug&quot;: &quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;,&#10;    &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@nestjs/jwt&quot;: &quot;^10.2.0&quot;,&#10;    &quot;@nestjs/passport&quot;: &quot;^10.0.3&quot;,&#10;    &quot;@nestjs/typeorm&quot;: &quot;^10.0.2&quot;,&#10;    &quot;argon2&quot;: &quot;^0.40.1&quot;,&#10;    &quot;class-transformer&quot;: &quot;^0.5.1&quot;,&#10;    &quot;class-validator&quot;: &quot;^0.14.1&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-jwt&quot;: &quot;^4.0.1&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.0&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.1&quot;,&#10;    &quot;typeorm&quot;: &quot;^0.3.20&quot;,&#10;    &quot;mysql2&quot;: &quot;^3.11.3&quot;,&#10;    &quot;joi&quot;: &quot;^17.13.3&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@nestjs/cli&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@types/express&quot;: &quot;^5.0.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^29.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^20.3.1&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.0.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint&quot;: &quot;^8.0.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^9.0.0&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.0.0&quot;,&#10;    &quot;jest&quot;: &quot;^29.5.0&quot;,&#10;    &quot;prettier&quot;: &quot;^3.0.0&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^7.0.0&quot;,&#10;    &quot;ts-jest&quot;: &quot;^29.1.0&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.4.3&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.1&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.1.3&quot;&#10;  },&#10;  &quot;jest&quot;: {&#10;    &quot;moduleFileExtensions&quot;: [&#10;      &quot;js&quot;,&#10;      &quot;json&quot;,&#10;      &quot;ts&quot;&#10;    ],&#10;    &quot;rootDir&quot;: &quot;src&quot;,&#10;    &quot;testRegex&quot;: &quot;.*\\.spec\\.ts$&quot;,&#10;    &quot;transform&quot;: {&#10;      &quot;^.+\\.(t|j)s$&quot;: &quot;ts-jest&quot;&#10;    },&#10;    &quot;collectCoverageFrom&quot;: [&#10;      &quot;**/*.(t|j)s&quot;&#10;    ],&#10;    &quot;coverageDirectory&quot;: &quot;../coverage&quot;,&#10;    &quot;testEnvironment&quot;: &quot;node&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/common/decorators/current-user.decorator.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/common/decorators/current-user.decorator.ts" />
              <option name="updatedContent" value="import { createParamDecorator, ExecutionContext } from '@nestjs/common';&#10;&#10;export interface JwtUser {&#10;  sub: number;&#10;  email: string;&#10;  name: string;&#10;  iat?: number;&#10;  exp?: number;&#10;}&#10;&#10;export const CurrentUser = createParamDecorator&lt;keyof JwtUser | undefined&gt;(&#10;  (data: keyof JwtUser | undefined, ctx: ExecutionContext) =&gt; {&#10;    const request = ctx.switchToHttp().getRequest();&#10;    const user: JwtUser | undefined = request.user;&#10;    if (!user) return undefined;&#10;    return data ? user[data] : user;&#10;  },&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/common/guards/jwt-auth.guard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/common/guards/jwt-auth.guard.ts" />
              <option name="updatedContent" value="import { Injectable } from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;&#10;@Injectable()&#10;export class JwtAuthGuard extends AuthGuard('jwt') {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/database/entities/algorithm.entity.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/database/entities/algorithm.entity.ts" />
              <option name="originalContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn, Index } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;export type AlgorithmCategory = 'sorting' | 'search' | 'graph' | 'dp' | 'string' | 'greedy' | 'tree';&#10;export type AlgorithmDifficulty = 'easy' | 'medium' | 'hard';&#10;&#10;@Entity('algorithms')&#10;export class Algorithm {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Index({ unique: true })&#10;  @Index({ unique: true })&#10;  @Column({ type: 'varchar', length: 100, unique: true })&#10;  slug: string;&#10;&#10;  @Column({ type: 'varchar', length: 150 })&#10;  name: string;&#10;&#10;  @Index()&#10;  @Column({ type: 'varchar', length: 20 })&#10;  category: AlgorithmCategory;&#10;&#10;  @Column({ type: 'varchar', length: 10 })&#10;  difficulty: AlgorithmDifficulty;&#10;&#10;  @Column({ type: 'text', nullable: true })&#10;  description?: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.algorithm)&#10;  learnedBy: UserAlgorithm[];&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn, Index } from 'typeorm';&#10;import { UserAlgorithm } from './user-algorithm.entity';&#10;&#10;export type AlgorithmCategory = 'sorting' | 'search' | 'graph' | 'dp' | 'string' | 'greedy' | 'tree';&#10;export type AlgorithmDifficulty = 'easy' | 'medium' | 'hard';&#10;&#10;@Entity('algorithms')&#10;export class Algorithm {&#10;  @PrimaryGeneratedColumn('increment')&#10;  id: number;&#10;&#10;  @Column({ type: 'varchar', length: 100, unique: true })&#10;  slug: string;&#10;&#10;  @Column({ type: 'varchar', length: 150 })&#10;  name: string;&#10;&#10;  @Index()&#10;  @Column({ type: 'varchar', length: 20 })&#10;  category: AlgorithmCategory;&#10;&#10;  @Column({ type: 'varchar', length: 10 })&#10;  difficulty: AlgorithmDifficulty;&#10;&#10;  @Column({ type: 'text', nullable: true })&#10;  description?: string;&#10;&#10;  @CreateDateColumn({ name: 'created_at' })&#10;  createdAt: Date;&#10;&#10;  @UpdateDateColumn({ name: 'updated_at' })&#10;  updatedAt: Date;&#10;&#10;  @OneToMany(() =&gt; UserAlgorithm, (ua) =&gt; ua.algorithm)&#10;  learnedBy: UserAlgorithm[];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>