services:
  db:
    image: mariadb:10.6
    environment:
      MARIADB_DATABASE: algorithm_hub
      MARIADB_USER: algouser
      MARIADB_PASSWORD: algopass
      MARIADB_ROOT_PASSWORD: rootpass
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    restart: unless-stopped
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 0
    depends_on:
      - db
    ports:
      - "8087:80"
    networks:
      - internal

  backend:
    build: ./backend
    env_file:
      - ./backend/.env
    environment:
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: algouser
      DB_PASSWORD: algopass
      DB_NAME: algorithm_hub
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.middlewares=secHeaders@docker"
      - "traefik.docker.network=traefik"

  frontend:
    build: ./frontend
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
    depends_on:
      - backend
    networks:
      - internal
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.middlewares=secHeaders@docker"
      - "traefik.docker.network=traefik"

  traefik:
    image: traefik:v3.0
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - traefik
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      # Middleware cabeceras seguras (simplificado para compatibilidad v3)
      - "traefik.http.middlewares.secHeaders.headers.stsSeconds=63072000"
      - "traefik.http.middlewares.secHeaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secHeaders.headers.stsPreload=true"
      - "traefik.http.middlewares.secHeaders.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.secHeaders.headers.referrerPolicy=no-referrer"
      - "traefik.http.middlewares.secHeaders.headers.contentTypeNosniff=true"
      # (Opcional) añade Permissions-Policy / X-Frame-Options vía customResponseHeaders si se requiere.

networks:
  traefik:
    name: traefik  # fuerza nombre sin prefijo para que coincida con label traefik.docker.network
    driver: bridge
  internal:
    driver: bridge

volumes:
  db_data:
  traefik_letsencrypt:
